axis(side=1,labels= F,at=seq(0,6))
View(MGdiv)
View(Cdiv)
View(abundance)
View(abundanceC)
View(abundanceM)
model1 <- lm(ShannonIndex ~ siteID + sampleType, data = divDF)
model1
summary(model1)
x1 <- rnorm(100)
noise <- rnorm(100, 1,2)
y1 <- x1*2.5 + noise
testmod1 <- lm(y1 ~ x1)
plot(x = x1, y = y1)
testmod1 <- lm(y1 ~ x1)
summary(testmod1)
x2 <- rnorm(100)
library(vegan)
? NMDS
>? NMDS
?? NMDS
?? nms
View(divDF)
par(mfrow(c(2,3)))
ggplot(divDF,aes(x=plotID,y=ShannonIndex, fill=sampleType,color=sampleType)) +
geom_bar(stat="identity",position="dodge", colours("sandybrown","seashell"))
par(mfrow(c(2,3)))
ggplot(divDF,aes(x=plotID,y=ShannonIndex, fill=sampleType,color=sampleType)) +
geom_bar(stat="identity",position="dodge", colours(c("sandybrown","seashell")))
par(mfrow=c(2,3))
ggplot(divDF,aes(x=plotID,y=ShannonIndex, fill=sampleType,color=sampleType)) +
geom_bar(stat="identity",position="dodge", colours(c("sandybrown","seashell")))
par(mfrow=c(2,3))
ggplot(divDF,aes(x=plotID,y=ShannonIndex, fill=sampleType,color=sampleType)) +
geom_bar(stat="identity",position="dodge", colours=c("sandybrown","seashell"))
par(mfrow=c(2,3))
ggplot(divDF,aes(x=plotID,y=ShannonIndex, fill=sampleType,color=sampleType)) +
geom_bar(stat="identity",position="dodge", colour=c("sandybrown","seashell"))
par(mfrow=c(2,3))
ggplot(divDF,aes(x=sampleID,y=ShannonIndex)) +
geom_bar(aes(fill=sampleType),stat="identity",position="dodge") + scale_fill_grey()
ggplot(divDF,aes(x=sampleID,y=ShannonIndex)) + facet_wrap(siteID)
geom_bar(aes(fill=sampleType),stat="identity",position="dodge") + scale_fill_grey()
ggplot(divDF,aes(x=sampleID,y=ShannonIndex)) + facet_wrap(siteID) +
geom_bar(aes(fill=sampleType),stat="identity",position="dodge") + scale_fill_grey()
ggplot(divDF,aes(x=sampleID,y=ShannonIndex)) + facet_wrap(divDFsiteID) +
geom_bar(aes(fill=sampleType),stat="identity",position="dodge") + scale_fill_grey()
ggplot(divDF,aes(x=sampleID,y=ShannonIndex)) + facet_wrap(divDF$siteID) +
geom_bar(aes(fill=sampleType),stat="identity",position="dodge") + scale_fill_grey()
ggplot(divDF,aes(x=sampleID,y=ShannonIndex)) + facet_wrap(divDF) +
geom_bar(aes(fill=sampleType),stat="identity",position="dodge") + scale_fill_grey()
ggplot(divDF,aes(x=sampleID,y=ShannonIndex)) + facet_wrap(~siteID,3) +
geom_bar(aes(fill=sampleType),stat="identity",position="dodge") + scale_fill_grey()
ggplot(divDF,aes(x=(plotID=="CPER"),y=ShannonIndex)) +
geom_bar(aes(fill=sampleType),stat="identity",position="dodge") + scale_fill()
ggplot(divDF,aes(x=(plotID=="CPER"),y=ShannonIndex)) +
geom_bar(aes(fill=sampleType),stat="identity",position="dodge") + scale_fill_manual(values=c("sandybrown","seashell"))
ggplot(divDF,aes(x=(filter(divDF,grepl("CPER",divDF$plotID)==FALSE)),y=ShannonIndex)) +
geom_bar(aes(fill=sampleType),stat="identity",position="dodge") + scale_fill_manual(values=c("sandybrown","seashell"))
ggplot(divDF,aes(x=(filter(divDF,grepl("CPER",divDF$plotID)==T)),y=ShannonIndex)) +
geom_bar(aes(fill=sampleType),stat="identity",position="dodge") + scale_fill_manual(values=c("sandybrown","seashell"))
ggplot(divDF,aes(x=(grepl("CPER",divDF$plotID)==T),y=ShannonIndex)) +
geom_bar(aes(fill=sampleType),stat="identity",position="dodge") + scale_fill_manual(values=c("sandybrown","seashell"))
ggplot(divDF,aes(x=(grep("CPER",divDF$plotID)),y=ShannonIndex)) +
geom_bar(aes(fill=sampleType),stat="identity",position="dodge") + scale_fill_manual(values=c("sandybrown","seashell"))
ggplot(divDF,aes(x=(grepl("CPER",divDF$sampleID)==T),y=ShannonIndex)) +
geom_bar(aes(fill=sampleType),stat="identity",position="dodge") + scale_fill_manual(values=c("sandybrown","seashell"))
ggplot(divDF,aes(x=sampleID,y=ShannonIndex)) +
geom_bar(aes(fill=sampleType),stat="identity",position="dodge") + scale_fill_manual(values=c("sandybrown","seashell"))
setwd("C:/Users/fjanz/Documents/GitHub/NEON-Internship-2016")
#read in file with ID mapping info
IDfile <- read.csv("ID_mapping_file.csv")
#remove uneeded columns
IDfile <- IDfile[,-1]
divDF <- data.frame(metagenomeID=as.character(),
sampleType=as.character(),
ShannonIndex=as.numeric(),
stringsAsFactors = FALSE)
e <- length(plotnames)*2 #number of samples
j <- 1
#fill graphing data frame
for(i in 1:e){
if (i <= (e/2)){
divDF[i,1] <- MGplotnames[i]
divDF[i,2] <- sampleTypes[i,1]
divDF[i,3] <- MGdiv[i,1]
} else {
divDF[i,1] <- Cplotnames[j]
divDF[i,2] <- sampleTypes[j,2]
divDF[i,3] <- Cdiv[j,1]
j <- j + 1
}
}
divDF <- merge(divDF,IDfile,by="metagenomeID")
divDF <- sort(divDF$sampleID)
divDF$siteID <- stringr::str_sub(divDF$sampleID,1,4)
divDF$plotID <- stringr::str_sub(divDF$sampleID,1,8)
setwd("C:/Users/fjanz/Documents/GitHub/NEON-Internship-2016")
#read in file with ID mapping info
IDfile <- read.csv("ID_mapping_file.csv")
#remove uneeded columns
IDfile <- IDfile[,-1]
IDfile <- read.csv("ID_mapping_file.csv")
setwd("C:/Users/fjanz/Documents")
#read in file with ID mapping info
IDfile <- read.csv("ID_mapping_file.csv")
View(IDfile)
IDfile <- IDfile[,-1]
divDF <- data.frame(metagenomeID=as.character(),
sampleType=as.character(),
ShannonIndex=as.numeric(),
stringsAsFactors = FALSE)
e <- length(plotnames)*2 #number of samples
j <- 1
#fill graphing data frame
for(i in 1:e){
if (i <= (e/2)){
divDF[i,1] <- MGplotnames[i]
divDF[i,2] <- sampleTypes[i,1]
divDF[i,3] <- MGdiv[i,1]
} else {
divDF[i,1] <- Cplotnames[j]
divDF[i,2] <- sampleTypes[j,2]
divDF[i,3] <- Cdiv[j,1]
j <- j + 1
}
}
divDF <- merge(divDF,IDfile,by="metagenomeID")
divDF <- sort(divDF$Event_name)
divDF <- data.frame(metagenomeID=as.character(),
sampleType=as.character(),
ShannonIndex=as.numeric(),
stringsAsFactors = FALSE)
e <- length(plotnames)*2 #number of samples
j <- 1
#fill graphing data frame
for(i in 1:e){
if (i <= (e/2)){
divDF[i,1] <- MGplotnames[i]
divDF[i,2] <- sampleTypes[i,1]
divDF[i,3] <- MGdiv[i,1]
} else {
divDF[i,1] <- Cplotnames[j]
divDF[i,2] <- sampleTypes[j,2]
divDF[i,3] <- Cdiv[j,1]
j <- j + 1
}
}
divDF <- merge(divDF,IDfile,by="metagenomeID")
divDF <- sort(divDF$Event_name)
divDF <- data.frame(metagenomeID=as.character(),
sampleType=as.character(),
ShannonIndex=as.numeric(),
stringsAsFactors = FALSE)
e <- length(plotnames)*2 #number of samples
j <- 1
#fill graphing data frame
for(i in 1:e){
if (i <= (e/2)){
divDF[i,1] <- MGplotnames[i]
divDF[i,2] <- sampleTypes[i,1]
divDF[i,3] <- MGdiv[i,1]
} else {
divDF[i,1] <- Cplotnames[j]
divDF[i,2] <- sampleTypes[j,2]
divDF[i,3] <- Cdiv[j,1]
j <- j + 1
}
}
divDF <- merge(divDF,IDfile,by="metagenomeID")
divDF$siteID <- stringr::str_sub(divDF$sampleID,1,4)
divDF$plotID <- stringr::str_sub(divDF$sampleID,1,8)
divDF <- Sort(by=Event_name,data=divDF)
divDF <- data.frame(metagenomeID=as.character(),
sampleType=as.character(),
ShannonIndex=as.numeric(),
stringsAsFactors = FALSE)
e <- length(plotnames)*2 #number of samples
j <- 1
#fill graphing data frame
for(i in 1:e){
if (i <= (e/2)){
divDF[i,1] <- MGplotnames[i]
divDF[i,2] <- sampleTypes[i,1]
divDF[i,3] <- MGdiv[i,1]
} else {
divDF[i,1] <- Cplotnames[j]
divDF[i,2] <- sampleTypes[j,2]
divDF[i,3] <- Cdiv[j,1]
j <- j + 1
}
}
divDF <- merge(divDF,IDfile,by="metagenomeID")
divDF <- order(divDF,method="radix")
divDF <- data.frame(metagenomeID=as.character(),
sampleType=as.character(),
ShannonIndex=as.numeric(),
stringsAsFactors = FALSE)
e <- length(plotnames)*2 #number of samples
j <- 1
#fill graphing data frame
for(i in 1:e){
if (i <= (e/2)){
divDF[i,1] <- MGplotnames[i]
divDF[i,2] <- sampleTypes[i,1]
divDF[i,3] <- MGdiv[i,1]
} else {
divDF[i,1] <- Cplotnames[j]
divDF[i,2] <- sampleTypes[j,2]
divDF[i,3] <- Cdiv[j,1]
j <- j + 1
}
}
divDF <- merge(divDF,IDfile,by="metagenomeID")
divDF <- Sort(by=Event_name,data=divDF)
divDF <- divDF[order(Event_name)]
divDF <- divDF[order(divDF$Event_name)]
View(divDF)
divDF <- divDF[,order(divDF$Event_name)]
divDF <- divDF[order(divDF$Event_name),]
ggplot(divDF,aes(x=Event_name,y=ShannonIndex)) +
geom_bar(aes(fill=sampleType),stat="identity",position="dodge") + scale_fill_manual(values=c("sandybrown","seashell"))
ggplot(divDF,aes(x=Event_name,y=ShannonIndex)) + facet_wrap(~siteID,3) +
geom_bar(aes(fill=sampleType),stat="identity",position="dodge") + scale_fill_manual(values=c("seashell","sandybrown"))
divDF$siteID <- stringr::str_sub(divDF$sampleID,1,4)
divDF$plotID <- stringr::str_sub(divDF$sampleID,1,8)
ggplot(divDF,aes(x=Event_name,y=ShannonIndex)) + facet_wrap(~siteID,3) +
geom_bar(aes(fill=sampleType),stat="identity",position="dodge") + scale_fill_manual(values=c("seashell","sandybrown"))
model1 <- lm(ShannonIndex ~ siteID + sampleType, data = divDF)
summary(model1)
addIdentifiers <- function (df1,IDs){
df <- merge(df,IDs,by="metagenomeID")
df$siteID <- stringr::str_sub(df$sampleID,1,4)
df$plotID <- stringr::str_sub(df$sampleID,1,8)
df <- df[order(df$Event_name),]
return(df)
}
divDF <- data.frame(metagenomeID=as.character(),
sampleType=as.character(),
ShannonIndex=as.numeric(),
stringsAsFactors = FALSE)
specRich <- data.frame(metagenomeID=as.character(),
sampleType=as.character(),
speciesRichness=as.numeric(),
stringsAsFactors = FALSE)
e <- length(plotnames)*2 #number of samples
j <- 1
#fill graphing data frame
for(i in 1:e){
if (i <= (e/2)){
divDF[i,1] <- MGplotnames[i]
divDF[i,2] <- sampleTypes[i,1]
divDF[i,3] <- MGdiv[i,1]
specRich[i,1] <- MGplotnames[i]
specRich[i,2] <- sampleTypes[i,1]
specRich[i,3] <- abundanceM[i,1]
} else {
divDF[i,1] <- Cplotnames[j]
divDF[i,2] <- sampleTypes[j,2]
divDF[i,3] <- Cdiv[j,1]
specRich[i,1] <- Cplotnames[j]
specRich[i,2] <- sampleTypes[j,2]
specRich[i,3] <- abundanceC[j,1]
j <- j + 1
}
}
View(specRich)
addIdentifiers <- function (df1,IDs){
df <- merge(df,IDs,by="metagenomeID")
df$siteID <- stringr::str_sub(df$sampleID,1,4)
df$plotID <- stringr::str_sub(df$sampleID,1,8)
df <- df[order(df$Event_name),]
return(df)
}
divDF <- addIdentifiers(divDF)
rm(list=ls())
mergeData <- function(fileA, fileB){
combinedData <- merge(x = fileA, y = fileB, by="Taxonomy", all=TRUE)
combinedData[is.na(combinedData)] <- 0 #replace NAs with 0s
return(combinedData)
}
#removes uneeded columns
cleanFile <- function(afile){
afile <- afile[,-4] #delete phantom empty column
afile <- afile[,-1] #delete taxon column
return(afile)
}
#filters out non-microbial genomic data
cleanTaxon <- function (df){
df <- filter(df,grepl("virus",df$Taxonomy)==FALSE)
df <- filter(df,grepl("Eukaryota",df$Taxonomy)==FALSE)
df <- filter(df,grepl("Eukaryota",df$Taxonomy)==FALSE)
df <- filter(df,grepl("unclassified",df$Taxonomy)==FALSE)
return(df)
}
fill.taxonomy.newMG <- function(x) {
### Parses taxon names in abundance table. Specific for 'new' MG-RAST output
### tables with structure "metagenomeID.DB.taxonlevel.csv"
### Table should be read in as tab-separated .csv file.
### By Lee Stanish June 27, 2016
tax <- x[,1]
alltax <- str_split_fixed(as.character(tax), pattern=";",n=7)
colnames(alltax) <- c("domain", "phylum", "class", "order", "family","genus", "species")
alltax <- data.frame(alltax)
return(alltax)
}
t.otu <- function(x, s, e) {
## Written by Lee Stanish
## transpose OTU table for ordination analysis##
## x=OTU table; s=starting column; e=ending column
x <- as.data.frame(x)
x1 <- t(x[,c(s:e)])      # transpose OTU counts
colnames(x1) <- x[,1]     #replace OTU ids as column names
x1
}
#---------------------------------------------------------------------------------------------------------------------
#Run main script
setwd("C:/Users/fjanz/Documents")
#read in file with ID mapping info
IDfile <- read.csv("ID_mapping_file.csv")
#remove uneeded columns
IDfile <- IDfile[,-1]
setwd("C:/Users/fjanz/Documents/GitHub/NEON-Internship-2016/metagenome_tables/OTUtables/MGdata")
#tell R where to look for things
directory <- ("C:/Users/fjanz/Documents/GitHub/NEON-Internship-2016/metagenome_tables/OTUtables/MGdata")
files <- list.files(directory, full.names = FALSE)
testFile <- readLines(files[1],2539)
file1 <- read.table(files[1],quote = "", sep='\t',header=TRUE, skip = 2)
file2 <- read.table(files[2],quote = "", sep='\t',header=TRUE, skip = 2)
file1 <- cleanFile(file1)
file2 <- cleanFile(file2)
#combine first two files
MGotu <- as.data.frame(mergeData(file1,file2))
END <- length(files)
#read in and merge remaining files
for (i in 3:END){
tempfile <- read.table(files[i], quote = "", sep="\t", skip = 2,header = TRUE)
tempfile <- cleanFile(tempfile)
MGotu <- as.data.frame(mergeData(MGotu,tempfile))
}
#filter unwanted data
MGotu <- cleanTaxon(MGotu)
#split out taxonomic info
MGtaxa <- fill.taxonomy.newMG(MGotu)
#transpose columns and rows and organize to prep for diversity analysis
MGotu_flip <- t.otu(x=MGotu,s=2,e=END)
MGotu_flip <- Sort(by=row.names,data=MGotu_flip)
#repeat process for composite data
setwd("C:/Users/fjanz/Documents/GitHub/NEON-Internship-2016/metagenome_tables/OTUtables/Cdata")
directory <- ("C:/Users/fjanz/Documents/GitHub/NEON-Internship-2016/metagenome_tables/OTUtables/Cdata")
files <- list.files(directory, full.names = FALSE)
file1 <- read.table(files[1],quote = "", sep='\t', skip = 2, header=TRUE)
file2 <- read.table(files[2],quote = "", sep="\t", skip = 2, header = TRUE)
file1 <- cleanFile(file1)
file2 <- cleanFile(file2)
Cotu <- mergeData(file1,file2)
END2 <- length(files)
for (i in 3:END2){
tempfile <- read.table(files[i], quote = "", sep="\t", skip = 2, header = TRUE)
tempfile <- cleanFile(tempfile)
Cotu <- mergeData(Cotu,tempfile)
}
Cotu <- cleanTaxon(Cotu)
Ctaxa <- fill.taxonomy.newMG(Cotu)
Cotu_flip <- t.otu(x=Cotu,s=2,e=END2)
Cotu_flip <- Sort(by=row.names,data=Cotu_flip)
#----------------------------------------------------------------------------------------------------------------------
##### Diversity analyses on all 37 files for each sample method #####
Cdiv <- (rep(0,END2-1))
abundanceC <- (rep(0,END2-1))
for (i in 1:(END2-1)){
Cdiv[i] <- diversity(as.numeric(Cotu_flip[i,]))
abundanceC[i] <- specnumber(Cotu_flip[i,])
}
MGdiv <- (rep(0,END-1))
abundanceM <- (rep(0,END-1))
for (i in 1:(END-1)){
MGdiv[i] <- diversity(as.numeric(MGotu_flip[i,]))
abundanceM[i] <- specnumber(MGotu_flip[i,])
}
#convert diversity measures to data frames
Cdiv <- as.data.frame(Cdiv)
MGdiv <- as.data.frame(MGdiv)
abundanceC <- as.data.frame(abundanceC)
abundanceM <- as.data.frame(abundanceM)
#add names for merging
MGplotnames <- rownames(MGotu_flip)
Cplotnames <- rownames(Cotu_flip)
rownames(MGdiv) <- MGplotnames
rownames(Cdiv) <- Cplotnames
rownames(abundanceM) <- MGplotnames
rownames(abundanceC) <- Cplotnames
sampleTypes <- matrix(nrow=37,ncol=2)
sampleTypes[,1] <- rep("Individual",37)
sampleTypes[,2] <- rep("Composite", 37)
#create empty data frame for graphing
divDF <- data.frame(metagenomeID=as.character(),
sampleType=as.character(),
ShannonIndex=as.numeric(),
stringsAsFactors = FALSE)
specRich <- data.frame(metagenomeID=as.character(),
sampleType=as.character(),
speciesRichness=as.numeric(),
stringsAsFactors = FALSE)
e <- length(plotnames)*2 #number of samples
j <- 1
for(i in 1:e){
if (i <= (e/2)){
divDF[i,1] <- MGplotnames[i]
divDF[i,2] <- sampleTypes[i,1]
divDF[i,3] <- MGdiv[i,1]
specRich[i,1] <- MGplotnames[i]
specRich[i,2] <- sampleTypes[i,1]
specRich[i,3] <- abundanceM[i,1]
} else {
divDF[i,1] <- Cplotnames[j]
divDF[i,2] <- sampleTypes[j,2]
divDF[i,3] <- Cdiv[j,1]
specRich[i,1] <- Cplotnames[j]
specRich[i,2] <- sampleTypes[j,2]
specRich[i,3] <- abundanceC[j,1]
j <- j + 1
}
}
e <- length(MGplotnames)*2
j <- 1
#fill graphing data frame
for(i in 1:e){
if (i <= (e/2)){
divDF[i,1] <- MGplotnames[i]
divDF[i,2] <- sampleTypes[i,1]
divDF[i,3] <- MGdiv[i,1]
specRich[i,1] <- MGplotnames[i]
specRich[i,2] <- sampleTypes[i,1]
specRich[i,3] <- abundanceM[i,1]
} else {
divDF[i,1] <- Cplotnames[j]
divDF[i,2] <- sampleTypes[j,2]
divDF[i,3] <- Cdiv[j,1]
specRich[i,1] <- Cplotnames[j]
specRich[i,2] <- sampleTypes[j,2]
specRich[i,3] <- abundanceC[j,1]
j <- j + 1
}
}
addIdentifiers <- function (df1,IDs){
df <- merge(df,IDs,by="metagenomeID")
df$siteID <- stringr::str_sub(df$sampleID,1,4)
df$plotID <- stringr::str_sub(df$sampleID,1,8)
df <- df[order(df$Event_name),]
return(df)
}
divDF <- addIdentifiers(divDF,IDfile)
divDF <- merge(divDF,IDfile,by="metagenomeID")
divDF$siteID <- stringr::str_sub(divDF$sampleID,1,4)
divDF$plotID <- stringr::str_sub(divDF$sampleID,1,8)
divDF <- divDF[order(divDF$Event_name),]
divDF <- data.frame(metagenomeID=as.character(),
sampleType=as.character(),
ShannonIndex=as.numeric(),
stringsAsFactors = FALSE)
specRich <- data.frame(metagenomeID=as.character(),
sampleType=as.character(),
speciesRichness=as.numeric(),
stringsAsFactors = FALSE)
e <- length(MGplotnames)*2 #number of samples
j <- 1
#fill graphing data frame
for(i in 1:e){
if (i <= (e/2)){
divDF[i,1] <- MGplotnames[i]
divDF[i,2] <- sampleTypes[i,1]
divDF[i,3] <- MGdiv[i,1]
specRich[i,1] <- MGplotnames[i]
specRich[i,2] <- sampleTypes[i,1]
specRich[i,3] <- abundanceM[i,1]
} else {
divDF[i,1] <- Cplotnames[j]
divDF[i,2] <- sampleTypes[j,2]
divDF[i,3] <- Cdiv[j,1]
specRich[i,1] <- Cplotnames[j]
specRich[i,2] <- sampleTypes[j,2]
specRich[i,3] <- abundanceC[j,1]
j <- j + 1
}
}
divDF_fill <- addIdentifiers(divDF,IDfile)
divDF <- merge(divDF,IDfile,by="metagenomeID")
divDF$siteID <- stringr::str_sub(divDF$sampleID,1,4)
divDF$plotID <- stringr::str_sub(divDF$sampleID,1,8)
divDF <- divDF[order(divDF$Event_name),]
specRich <- merge(specRich,IDfile,by="metagenomeID")
specRich$siteID <- stringr::str_sub(divDF$sampleID,1,4)
specRich$plotID <- stringr::str_sub(divDF$sampleID,1,8)
specRich <- specRich[order(specRich$Event_name),]
ggplot(specRich,aes(x=Event_name,y=speciesRichness)) + facet_wrap(~siteID,3) +
geom_bar(aes(fill=sampleType),stat="identity",position="dodge") + scale_fill_manual(values=c("seashell","sandybrown"))
model2 <- lm(speciesRichness ~ siteID + sampleType, data = specRich)
summary(model2)
library("stats")
aShan <- aov(ShannonIndex ~ sampleType, data = divDF)
aSR <- aov(SpeciesRichness ~ sampleType, data=specRich)
aSR <- aov(speciesRichness ~ sampleType, data=specRich)
summary(aShan)
aShan <- aov(ShannonIndex ~ siteID + sampleType, data = divDF)
summary(aShan)
summary(aSR)
aSR <- aov(speciesRichness ~ siteID + sampleType, data=specRich)
summary(aSR)
ggplot(divDF,aes(x=Event_name,y=ShannonIndex)) + facet_wrap(~siteID,3) +
geom_bar(aes(fill=sampleType),stat="identity",position="dodge") + scale_fill_manual(values=c("seashell","sandybrown"))
rm(list=ls())
