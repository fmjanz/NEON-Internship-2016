projInfo()
?project
proj4string.i <- paste("+proj=longlat +zone=", zone, " +north +ellps=WGS84 +datum=WGS84 +no_defs ", sep="")
latlong <- cbind(lat,long)
#xy <- data.frame(x=i$SWPoint_X, y=i$SWPoint_Y)
pj.i <- project(xy=latlong, proj4string.i, inverse=FALSE, degrees=TRUE)
LongLatToUTM <- function(x,y,zone){
## Converts latlong to utm (from stackoverflow Q#18639967)
# load libraries
library(proj4)
library(rgdal)
library(sp)
# Code
xy <- data.frame(ID = 1:length(x), X = x, Y = y)
coordinates(xy) <- c("X", "Y")
proj4string(xy) <- CRS("+proj=longlat +datum=WGS84")  ## for example
res <- spTransform(xy, CRS(paste("+proj=utm +zone=",zone," ellps=WGS84",sep='')))
return(as.data.frame(res))
# END FUNCTION
}
parseUTM <- function(file, dir) {
## Separate coordinates in same object from different UTM zones. The function stores all data from uploaded csv file as separate csv files  corresponding to each UTM zone.
require(dplyr, quietly=TRUE)
dir <- dir
dat <- read.csv(file)
utm.vals <- unique(dat$utmZone)
for(i in 1:length(utm.vals)) {
nm <- paste('dat.utm',utm.vals[i], sep="")
dat1 <- filter(dat, utmZone==utm.vals[i])
write.csv(dat1, file=paste(nm,".csv", sep=""))
print(paste(nm,"saved to working directory"))
}
# END FUNCTION
}
dir <- "/Users/lstanish/Documents/R_code"
file <- "/Users/lstanish/Documents/Data_sequences/Metagenomics/MGRAST_metadata_20160210.csv"
parseUTM(file=file, dir=dir)
file <- '/Users/lstanish/Documents/R_code/dat.utm13.csv'
dat <- read.csv(file)
out <- LongLatToUTM(dat$Long,dat$Lat,zone=dat$utmZone[1])
View(out)
View(dat)
mutate(out, SW_X = X-20)
out %>% mutate(SW_X = X-20) %>%
mutate(SW_Y = Y-20)
View(out)
View(dat)
?strsplit
file <- "/Users/lstanish/Documents/Data_sequences/Metagenomics/MGRAST_metadata_20160210.csv"
filenm <- '/Users/lstanish/Documents/R_code/dat.utm13.csv'
dat <- read.csv(file)
meta <- read.csv(file)
filenm <- '/Users/lstanish/Documents/R_code/dat.utm13.csv'
dat <- read.csv(file)
LongLatToUTM <- function(x,y,zone){
## Converts latlong to utm (from stackoverflow Q#18639967)
# load libraries
library(proj4)
library(rgdal)
library(sp)
# Code
xy <- data.frame(ID = 1:length(x), X = x, Y = y)
coordinates(xy) <- c("X", "Y")
proj4string(xy) <- CRS("+proj=longlat +datum=WGS84")  ## for example
res <- spTransform(xy, CRS(paste("+proj=utm +zone=",zone," ellps=WGS84",sep='')))
return(as.data.frame(res))
# END FUNCTION
}
parseUTM <- function(file, dir) {
## Separate coordinates in same object from different UTM zones. The function stores all data from uploaded csv file as separate csv files  corresponding to each UTM zone.
require(dplyr, quietly=TRUE)
dir <- dir
dat <- read.csv(file)
utm.vals <- unique(dat$utmZone)
for(i in 1:length(utm.vals)) {
nm <- paste('dat.utm',utm.vals[i], sep="")
dat1 <- filter(dat, utmZone==utm.vals[i])
write.csv(dat1, file=paste(nm,".csv", sep=""))
print(paste(nm,"saved to working directory"))
}
# END FUNCTION
}
dir <- "/Users/lstanish/Documents/R_code"
file <- "/Users/lstanish/Documents/Data_sequences/Metagenomics/MGRAST_metadata_20160210.csv"
meta <- read.csv(file)
parseUTM(file=file, dir=dir)
filenm <- '/Users/lstanish/Documents/R_code/dat.utm13.csv'
dat <- read.csv(file)
sids <- strsplit(meta$sampleID)
?strsplit
sids <- strsplit(meta$sampleID,"-")
sids <- strsplit(meta$sampleID,"[-]")
sids <- lapply(strsplit(meta$sampleID,"-"))
?sapply
sapply(strsplit(meta$sampleID, "-"),"[[", 2)
sids <- data.frame(meta$sampleID)
sids <- data.frame(meta$sampleID)
sids.split <- sapply(strsplit(sids,"-"))
sids
sids.split <- sapply(strsplit(sids,"\\-"))
sids.split <- sapply(strsplit(sids,"O"))
sids.split <- sapply(strsplit(sids,split="O"))
strsplit(sids,split="O")
strsplit(sids[1],split="O")
sids <- as.character(meta$sampleID)
sids.split <- sapply(strsplit(sids,split="O"))
strsplit(sids[1], "O")
sids.split <- sapply(strsplit(sids,split="O"), function(x) x[2]))
sids.split <- sapply(strsplit(sids,split="O"), function(x) x[2])
sids.split
sids.split <- sapply(strsplit(sids,split="-"), function(x) x[2])
sids.split
sids.split <- sapply(strsplit(sids,split="-"), function(x) x[3])
sids.split
sids.split.x <- sapply(strsplit(sids,split="-"), function(x) x[3])
sids.split.y <- sapply(strsplit(sids,split="-"), function(x) x[4])
sids.split.x <- sapply(strsplit(as.character(meta$sampleID),split="-"), function(x) x[3])
sids.split.x <- sapply(strsplit(as.character(meta$sampleID),split="-"),
function(x) x[3])
sids.split.y <- sapply(strsplit(as.character(meta$sampleID),split="-"),
function(x) x[4])
samplexy <- cbind(sids.split.x, sids.split.y)
View(samplexy)
samplexy[1,1] <50
samplexy[2,1] <50
as.numeric(samplexy)
samplexy <- as.numeric(cbind(sids.split.x, sids.split.y))
samplexy
samplexy <- cbind(as.numeric(sids.split.x), as.numeric(sids.split.y))
View(samplexy)
?gsub
notcoords <- which(samplexy>40)
notcoords
notx <- which(samplexy[,1]>40)
notxy <- which(samplexy[,1]>40)
samplexy1 <- samplexy[-notxy,]
View(samplexy1)
View(meta)
dir <- "/Users/lstanish/Documents/R_code"
file <- "/Users/lstanish/Documents/Data_sequences/Metagenomics/MGRAST_metadata_20160210.csv"
meta <- read.csv(file)
parseUTM(file=file, dir=dir)
filenm <- '/Users/lstanish/Documents/R_code/dat.utm13.csv'
dat <- read.csv(file)
sids.split.x <- sapply(strsplit(as.character(meta$sampleID),split="-"),
function(x) x[3])
sids.split.y <- sapply(strsplit(as.character(meta$sampleID),split="-"),
function(x) x[4])
samplexy <- cbind(as.numeric(sids.split.x), as.numeric(sids.split.y))
notxy <- which(samplexy[,1]>40)
samplexy1 <- samplexy[-notxy,]
View(samplexy1)
yesxy <- which(samplexy[,1]<=40)
out <- LongLatToUTM(dat$Long,dat$Lat,zone=dat$utmZone[1])
out <- out %>% mutate(SW_X = X-20) %>%
mutate(SW_Y = Y-20)
LongLatToUTM <- function(samp,x,y,zone){
## Converts latlong to utm (from stackoverflow Q#18639967)
# load libraries
library(proj4)
library(rgdal)
library(sp)
# Code
xy <- data.frame(ID = samp, X = x, Y = y)
coordinates(xy) <- c("X", "Y")
proj4string(xy) <- CRS("+proj=longlat +datum=WGS84")  ## for example
res <- spTransform(xy, CRS(paste("+proj=utm +zone=",zone," ellps=WGS84",sep='')))
return(as.data.frame(res))
# END FUNCTION
}
out <- LongLatToUTM(samp=dat$sampleID,dat$Long,dat$Lat,zone=dat$utmZone[1])
library(plyr)
?join
LongLatToUTM <- function(samp,x,y,zone){
## Converts latlong to utm (from stackoverflow Q#18639967)
# load libraries
library(proj4)
library(rgdal)
library(sp)
# Code
xy <- data.frame(sampleID = samp, X = x, Y = y)
coordinates(xy) <- c("X", "Y")
proj4string(xy) <- CRS("+proj=longlat +datum=WGS84")  ## for example
res <- spTransform(xy, CRS(paste("+proj=utm +zone=",zone," ellps=WGS84",sep='')))
return(as.data.frame(res))
# END FUNCTION
}
out <- LongLatToUTM(samp=dat$sampleID,dat$Long,dat$Lat,zone=dat$utmZone[1])
filenm <- '/Users/lstanish/Documents/R_code/dat.utm13.csv'
utmdat <- read.csv(file)
testfile <- read.csv("/Users/lstanish/Github/organismalIPT/microbes/AQUA_MICROBES.csv")
View(testfile)
names(testfile)
library(dplyr)
wdir <- "/Users/lstanish/Github/organismalIPT/"
dat <- read.csv(paste(wdir, "aquCellCts/amc_fielddata_golden_draft.csv", sep=""))
View(dat)
if (file.exists(
"/Users/lstanish/Github/organismalIPT/aquCellCts/ingest/amc_ingests_pubs.xls")){
gitPath <- "/Users/lstanish/Github"
} else {
print("ERROR: File path does not exist")
}
inpath <- paste(gitPath,"organismalIPT/aquCellCts/ingest/amc_ingests_pubs.xls", sep="/")
ingout <- paste(gitPath,"organismalIPT/aquCellCts/ingest/amc_dataingest_NEON.DOC.002948", sep="/")
pubout <- paste(gitPath,"organismalIPT/aquCellCts/amc_datapub_NEON.DOC.003624", sep="/")
modlovout <- paste(gitPath,"organismalIPT/aquCellCts/LOV_amc.txt", sep="/")
wbCodePath <- paste(gitPath,"organismalIPT/aquCellCts/checkAndPrintWB.R", sep="/")
source(wbCodePath) # define functions, default values, etc for outputs, uses "inpath" defined above
writeIngest.csv(paste(ingout,".csv", sep="") )
writePub.csv(paste(pubout,".csv",sep=""), inSheetName="pub_DP1") # writes pub and stores as object to use with writeVariables, inSheetName is pub_DP1 if unspecified
if (file.exists(
"/Users/lstanish/Github/organismalIPT/aquCellCts/ingest/amc_ingests_pubs.xls")){
gitPath <- "/Users/lstanish/Github"
} else {
print("ERROR: File path does not exist")
}
inpath <- paste(gitPath,"organismalIPT/aquCellCts/ingest/amc_ingests_pubs.xls", sep="/")
ingout <- paste(gitPath,"organismalIPT/aquCellCts/ingest/amc_dataingest_NEON.DOC.002948", sep="/")
pubout <- paste(gitPath,"organismalIPT/aquCellCts/amc_datapub_NEON.DOC.003624", sep="/")
modlovout <- paste(gitPath,"organismalIPT/aquCellCts/LOV_amc.txt", sep="/")
wbCodePath <- paste(gitPath,"organismalIPT/aquCellCts/checkAndPrintWB.R", sep="/")
source(wbCodePath) # define functions, default values, etc for outputs, uses "inpath" defined above
writeIngest.csv(paste(ingout,".csv", sep="") )
writePub.csv(paste(pubout,".csv",sep=""), inSheetName="pub_DP1") # writes pub and stores as object to use with writeVariables, inSheetName is pub_DP1 if unspecified
if (file.exists(
"/Users/lstanish/Github/organismalIPT/aquCellCts/ingest/amc_ingests_pubs.xls")){
gitPath <- "/Users/lstanish/Github"
} else {
print("ERROR: File path does not exist")
}
inpath <- paste(gitPath,"organismalIPT/aquCellCts/ingest/amc_ingests_pubs.xls", sep="/")
ingout <- paste(gitPath,"organismalIPT/aquCellCts/ingest/amc_dataingest_NEON.DOC.002948", sep="/")
pubout <- paste(gitPath,"organismalIPT/aquCellCts/amc_datapub_NEON.DOC.003624", sep="/")
modlovout <- paste(gitPath,"organismalIPT/aquCellCts/LOV_amc.txt", sep="/")
wbCodePath <- paste(gitPath,"organismalIPT/aquCellCts/checkAndPrintWB.R", sep="/")
source(wbCodePath) # define functions, default values, etc for outputs, uses "inpath" defined above
writeIngest.csv(paste(ingout,".csv", sep="") )
writePub.csv(paste(pubout,".csv",sep=""), inSheetName="pub_DP1") # writes pub and stores as object to use with writeVariables, inSheetName is pub_DP1 if unspecified
if (file.exists(
"/Users/lstanish/Github/organismalIPT/aquCellCts/ingest/amc_ingests_pubs.xls")){
gitPath <- "/Users/lstanish/Github"
} else {
print("ERROR: File path does not exist")
}
# where the xls file lives
inpath <- paste(gitPath,"organismalIPT/aquCellCts/ingest/amc_ingests_pubs.xls", sep="/")
# where ingest file will be outputted to
ingout <- paste(gitPath,"organismalIPT/aquCellCts/ingest/amc_dataingest_NEON.DOC.002948", sep="/")
# where pub file will be outputted to
pubout <- paste(gitPath,"organismalIPT/aquCellCts/amc_datapub_NEON.DOC.003624", sep="/")
# where LOV file will be outputted to
modlovout <- paste(gitPath,"organismalIPT/aquCellCts/LOV_amc.txt", sep="/")
# path to checkAndPrintWB.R functions
wbCodePath <- paste(gitPath,"organismalIPT/aquCellCts/checkAndPrintWB.R", sep="/")
# run code from wbCodePath
source(wbCodePath) # define functions, default values, etc for outputs, uses "inpath" defined above
writePub.csv(paste(pubout,".csv",sep=""), inSheetName="pub_DP1") # writes pub and stores as object to use with writeVariables, inSheetName is pub_DP1 if unspecified
LongLatToUTM <- function(samp,x,y,zone){
## Converts latlong to utm (from stackoverflow Q#18639967)
# load libraries
#library(proj4)
library(rgdal)
library(sp)
# Code
xy <- data.frame(sampleID = samp, X = x, Y = y)
coordinates(xy) <- c("X", "Y")
proj4string(xy) <- CRS("+proj=longlat +datum=WGS84")  ## for example
res <- spTransform(xy, CRS(paste("+proj=utm +zone=",zone," ellps=WGS84",sep='')))
return(as.data.frame(res))
# END FUNCTION
}
parseUTM <- function(x, dir) {
## Separate coordinates in same object from different UTM zones. The function stores all data from uploaded csv file as separate csv files  corresponding to each UTM zone.
require(dplyr, quietly=TRUE)
setwd(dir)
dat <- x
utm.vals <- unique(dat$utmZone)
print(paste("There are", length(utm.vals), "utm zones in dataset"))
for(i in 1:length(utm.vals)) {
nm <- paste('dat.utm',utm.vals[i], sep="")
dat1 <- filter(dat, utmZone==utm.vals[i])
write.csv(dat1, file=paste(nm,".csv", sep=""))
print(paste(nm,"saved to working directory"))
}
return(utm.vals)
# END FUNCTION
}
library(plyr)
library(dplyr)
dir <- "/Users/lstanish/Documents/R_code"
metafile <- read.csv("/Users/lstanish/Documents/Data_sequences/Metagenomics/MGRAST_metadata_20160210.csv")
outdir <- "/Users/lstanish/Documents/Data_sequences/Metagenomics/MGRAST_metadata_20160210"
timeZone <- read.csv(paste(dir,"siteID_timeZone_table.csv", sep="/"))
sids.split.x <- as.numeric(sapply(strsplit(as.character(metafile$sampleID),
split="-"), function(x) x[3]) )
sids.split.y <- as.numeric(sapply(strsplit(as.character(metafile$sampleID),
split="-"), function(x) x[4]) )
metafile.xy <- cbind(metafile,sampleX=sids.split.x, sampleY=sids.split.y)
# Locate only fields with valid sampleXY values
yesxy <- which(as.numeric(sids.split.x)<=40)
# Create object containing only samples with valid xy's
metafile.to.parse <- metafile.xy[yesxy,]
metafile.to.parse <- select(metafile.to.parse,MG.RAST.ID,sampleID,Lat,Long,utmZone,
sampleX, sampleY)
utms <- parseUTM(x=metafile.to.parse, dir=dir)
outfile <- NULL
for (k in 1:length(utms) ) {
parsedfilenm <- paste('/Users/lstanish/Documents/R_code/dat.utm',
utms[k], '.csv', sep="")
parsedat <- read.csv(parsedfilenm, row.names=1)
out <- LongLatToUTM(parsedat$sampleID,parsedat$Long,
parsedat$Lat,zone=parsedat$utmZone[1])
parsedat <- join(parsedat,out, by="sampleID")
## Move spatial location from plot centroid SW corner, and then to
## sample XY coords in plot
parsedat <- parsedat %>% mutate(SW_X = X-20) %>%
mutate(SW_Y = Y-20) %>% mutate(X_final = SW_X+sampleX) %>%
mutate(Y_final = SW_Y+sampleY)
## Re-convert from UTM to latlong using proj4string format
xy <- data.frame(x=parsedat$X_final, y=parsedat$Y_final)
coordinates(xy) <- c("x", "y")
proj4string(xy) <- CRS(paste("+proj=utm +zone=",
parsedat$utmZone[1], " +north +ellps=WGS84
+datum=WGS84 +units=m +no_defs ", sep=""))
res <- spTransform(xy, CRS("+proj=longlat +ellps=WGS84"))
longlat.adj <- as.data.frame(res)
## Replace centroid coordinates with corrected coordinates
parsedat$latitude <- round(longlat.adj$y, digits=5)
parsedat$longitude <- round(longlat.adj$x, digits=5)
# Remove duplicate columns and unwanted columns
parsedat.final <- parsedat[, !duplicated(colnames(parsedat))]
outfile <- bind_rows(outfile,parsedat)
# END OF for LOOP
}
metafile.rev <- join(metafile,outfile,by=c("MG.RAST.ID","sampleID", "Lat", "Long",
"utmZone"))
metafile.rev$siteID <- substring(metafile$sampleID,1,4)
metafile.rev <- merge(metafile.rev,timeZone,by="siteID")
View(metafile.rev)
sids.split.h <- as.numeric(sapply(strsplit(as.character(metafile$sampleID), split="-"), function(x) x[2]) )
sids.split.h
sids.split.h <- as.numeric(sapply(strsplit(as.character(metafile$sampleID), split="-"), function(x) x[1]) )
sids.split.h
metafile$sampleID
sids.split.x
sids.split.h <- as.numeric(sapply(strsplit(as.character(metafile$sampleID),
split="-"), function(x) x[2]) )
sids.split.h <- as.numeric(sapply(strsplit(as.character(metafile$sampleID),
split="-"), function(x) x[3]) )
sids.split.h <- as.character(sapply(strsplit(as.character(metafile$sampleID),
split="-"), function(x) x[3]) )
sids.split.h <- as.character(sapply(strsplit(as.character(metafile$sampleID),
split="-"), function(x) x[2]) )
sids.split.h
metafile$horizon <- as.character(sapply(strsplit(as.character(metafile$sampleID),
split="-"), function(x) x[2]) )
metafile$horizon <- gsub("O", "organic", metafile$horizon)
metafile$horizon <- gsub("M", "mineral", metafile$horizon)
names(metafile)
names(metafile.rev)
metafile.samp <- select(metafile.rev, sample_name, latitude, longitude, country,
location, biome, feature, material, collection_timezone)
metafile.rev <- rename(metafile.rev, sample_name=sampleID, metagenome_name=Metagenome.Name,
seq_meth=Sequence.Method, country=Country, location=Location,
biome=Biome, feature=Feature, material=Material,
collection_timezone=timeZone)
metafile.rev$investigation_type="metagenome"
index <- which(is.na(metafile.rev$latitude)==TRUE)
metafile.rev$latitude[index] <- metafile.rev$Lat[index]
metafile.rev$longitude[index] <- metafile.rev$Long[index]
metafile.rev$horizon <- as.character(sapply(strsplit(as.character(
metafile.rev$sample_name), split="-"), function(x) x[2]) )
metafile.rev$horizon <- as.character(sapply(strsplit(as.character(
metafile.rev$sample_name), split="-"), function(x) x[2]) )
metafile.rev$horizon <- gsub("O", "organic", metafile.rev$horizon)
metafile.rev$horizon <- gsub("M", "mineral", metafile.rev$horizon)
names(metafile.rev)
metafile.eps <- select(metafile.rev, sample_name, horizon)
write.csv(metafile.eps, "MGRAST_metadata_EPsoil.csv")
printwd()
getwd()
if (file.exists(
"/Users/lstanish/Github/organismalIPT/aquCellCts/ingest/amc_ingests_pubs.xls")){
gitPath <- "/Users/lstanish/Github"
} else {
print("ERROR: File path does not exist")
}
inpath <- paste(gitPath,"organismalIPT/aquCellCts/ingest/amc_ingests_pubs.xls", sep="/")
ingout <- paste(gitPath,"organismalIPT/aquCellCts/ingest/amc_dataingest_NEON.DOC.002948", sep="/")
pubout <- paste(gitPath,"organismalIPT/aquCellCts/amc_datapub_NEON.DOC.003624", sep="/")
modlovout <- paste(gitPath,"organismalIPT/aquCellCts/LOV_amc.txt", sep="/")
wbCodePath <- paste(gitPath,"organismalIPT/aquCellCts/checkAndPrintWB.R", sep="/")
source(wbCodePath) # define functions, default values, etc for outputs, uses "inpath" defined above
writeIngest.csv(paste(ingout,".csv", sep="") )
writePub.csv(paste(pubout,".csv",sep=""), inSheetName="pub_DP1") # writes pub and stores as object to use with writeVariables, inSheetName is pub_DP1 if unspecified
writeLOV(modlovout, inSheetName="mod_LOV") # LOV, inSheetName is mod_LOV if unspecified
NEON.site="HARV"
radius=25
directory=getwd()
networks="all"
shiny::runApp('~/Github/external-sites/shiny')
w.dir <- "/Users/lstanish/Documents/Sites/"
if (file.exists(
"/Users/lstanish/Github/organismalIPT/aquCellCts/ingest/amc_ingests_pubs.xls")){
gitPath <- "/Users/lstanish/Github"
} else {
print("ERROR: File path does not exist")
}
inpath <- paste(gitPath,"organismalIPT/aquCellCts/ingest/amc_ingests_pubs.xls", sep="/")
ingout <- paste(gitPath,"organismalIPT/aquCellCts/ingest/amc_dataingest_NEON.DOC.002948", sep="/")
pubout <- paste(gitPath,"organismalIPT/aquCellCts/amc_datapub_NEON.DOC.003624", sep="/")
modlovout <- paste(gitPath,"organismalIPT/aquCellCts/LOV_amc.txt", sep="/")
wbCodePath <- paste(gitPath,"organismalIPT/aquCellCts/checkAndPrintWB.R", sep="/")
source(wbCodePath) # define functions, default values, etc for outputs, uses "inpath" defined above
writeIngest.csv(paste(ingout,".csv", sep="") )
writePub.csv(paste(pubout,".csv",sep=""), inSheetName="pub_DP1") # writes pub and stores as object to use with writeVariables, inSheetName is pub_DP1 if unspecified
writeLOV(modlovout, inSheetName="mod_LOV") # LOV, inSheetName is mod_LOV if unspecified
inpath <- paste(gitPath,"organismalIPT/aquCellCts/ingest/amc_ingests_pubs.xls", sep="/")
ingout <- paste(gitPath,"organismalIPT/aquCellCts/ingest/amc_dataingest_NEON.DOC.002948", sep="/")
pubout <- paste(gitPath,"organismalIPT/aquCellCts/amc_datapub_NEON.DOC.003624", sep="/")
modlovout <- paste(gitPath,"organismalIPT/aquCellCts/LOV_amc.txt", sep="/")
writeIngest.csv(paste(ingout,".csv", sep="") )
writePub.csv(paste(pubout,".csv",sep=""), inSheetName="pub_DP1") # writes pub and stores as object to use with writeVariables, inSheetName is pub_DP1 if unspecified
writeLOV(modlovout, inSheetName="mod_LOV") # LOV, inSheetName is mod_LOV if unspecified
data.type <- "soilMoisture"
site <- "JORN"
w.dir <- "/Users/lstanish/Documents/Sites/"
site.file <- read.csv("sensorSiteKey.csv")
site.file <- read.csv(paste(w.dir, "sensorSiteKey.csv", sep="") )
site.file <- read.csv(paste(w.dir, "sensorSiteKey.csv", sep="") )
site.file <- read.csv(paste(w.dir, "sensorSiteKey.csv", sep="") )
site.file <- read.csv(paste(w.dir, "sensorSiteKey.csv", sep="") )
sensor.file <- read.csv(paste(w.dir, "dataTypeKey.csv", sep="") )
"/Users/lstanish/Documents/Sites/sensorSiteKey.csv"
read.csv("/Users/lstanish/Documents/Sites/sensorSiteKey.csv")
read.csv("/Users/lstanish/Documents/Sites/sensorSiteKey.csv")
w.dir <- "/Users/lstanish/Documents/Sites/"
site.file <- read.csv(paste(w.dir, "sensorSiteKey.csv", sep="") )
?read.table
site.file <- read.table(paste(w.dir, "sensorSiteKey.txt", sep="") )
test <- read.csv("/Users/lstanish/Github/organismalIPT/aquCellCts/amc_datapub_NEON.DOC.003624.csv")
site.file <- read.csv(paste(w.dir, "sensorSiteKey.txt", sep="") )
site.file <- read.csv(paste(w.dir, "sensorSiteKey.csv", sep="") )
sensor.file <- read.csv(paste(w.dir, "dataTypeKey.csv", sep="") )
sensor.file <- read.csv(paste(w.dir, "dataTypeKey.csv", sep="") )
sensor.file <- read.csv(paste(w.dir, "dataTypeKey.csv", sep="") )
sensor.file <- read.csv(paste(w.dir, "dataTypeKey.csv", sep="") )
scan.type <- sensor.file$scanDataType[which(sensor.file$dataType==data.type)]
scan.id <- site.file$scanID[which(site.file$siteID==site)]
file.list <- list.files(path=".", pattern=paste(scan.id,"_",scan.type))
file.list <- list.files(path=".", pattern=paste(scan.id,"_",scan.type, sep=""))
paste(scan.id,"_",scan.type, sep="")
?list.files
getwd()
file.list <- list.files(path=w.dir,
pattern=paste(scan.id,"_",scan.type, sep=""))
file.list
data.full = ldply(file.list, function(x){
t <- read.csv(x, header=TRUE, sep=",",stringsAsFactors = FALSE) # read the csv
t1 <- rbind(t) # rbind it to a temporary object
return(t1)
} )
file.list <- list.files(path=w.dir,
pattern=paste(scan.id,"_",scan.type, sep=""),
full.names=TRUE)
data.full = ldply(file.list, function(x){
t <- read.csv(x, header=TRUE, sep=",",stringsAsFactors = FALSE) # read the csv
t1 <- rbind(t) # rbind it to a temporary object
return(t1)
} )
read.csv(file.list[1], header=TRUE, stringsAsFactors=FALSE)
read.csv(file.list[1], stringsAsFactors=FALSE)
?read.csv
read.csv(file.list[1], stringsAsFactors=FALSE, skip=3)
test <- read.csv(file.list[1], stringsAsFactors=FALSE, skip=3)
data.full = ldply(file.list, function(x){
t <- read.csv(x, header=TRUE, sep=",", skip=3, stringsAsFactors = FALSE) # read the csv
t1 <- rbind(t) # rbind it to a temporary object
return(t1)
} )
View(data.full)
library(plyr)
library(dplyr)
library(atbdLibrary)
yr <- "2013"
setwd(paste("/Users/lstanish/Documents/sls_FieldData/sls_", yr, "/",
sep="") )
file.list <- list.files(path=".", pattern="soilcorecollection")
file.list
data.full = ldply(file.list, function(x){
t <- read.csv(x, header=TRUE, sep=",",stringsAsFactors = FALSE) # read the csv
t1 <- rbind(t) # rbind it to a temporary object
return(t1)
} )
length(file.list)
for(i in 1:length(file.list)) {
t <- read.csv(file.list[i],header = TRUE, sep=",", stringsAsFactors = FALSE) # read in csv
print(t[1,1])
}
file.list
for(i in 1:length(file.list)) {
t <- read.csv(file.list[i],header = TRUE, sep=",", stringsAsFactors = FALSE) # read in csv
print(file.list[i])
}
setwd("/Users/lstanish/Github/NEON-Internship-2016/MGRAST_DataSets/")
test <- read.csv("CPER4367823.3genusC.tsv", stringsAsFactors = FALSE)
View(test)
test <- read.csv("CPER4367823.3genusC copy.csv", stringsAsFactors = FALSE)
View(test)
View(test)
?merge
