specRich[i,3] <- abundanceM[i,1]
} else {
divDF[i,1] <- Cplotnames[j]
divDF[i,2] <- sampleTypes[j,2] #"Composite"
divDF[i,3] <- Cdiv[j,1]
specRich[i,1] <- Cplotnames[j]
specRich[i,2] <- sampleTypes[j,2]
specRich[i,3] <- abundanceC[j,1]
j <- j + 1
}
}
#create columns for easy sorting during graphing
divDF <- merge(divDF,IDfile,by="metagenomeID")
divDF$siteID <- stringr::str_sub(divDF$sampleID,1,4)
divDF$plotID <- stringr::str_sub(divDF$sampleID,1,8)
ordered <- order(divDF$Event_name)
ordered
View(Cotu_flip)
View(MGdiv)
View(MGdiv)
View(MGotu_flip)
View(Cotu_flip)
setwd("C:/Users/fjanz/Documents")
library(vegan)
library(ggplot2)
library(grid)
otu.t <- t.otu(x=merged_OTU,s=2,e=length(merged_OTU))  # adjust numbers as needed for your OTU table
View(otu.t)
ncol(otu.t)
taxonomy <- merged_OTU$Taxonomy   # check that #columns in otu.t=length of taxonomy
View(fill.taxonomy.newMG)
taxonomy <- fill.taxonomy.newMG(merged_OTU$Taxonomy)   # check that #columns in otu.t=length of taxonomy
taxonomy[1]
fill.taxonomy.newMG <- function(x) {
### Parses taxon names in abundance table. Specific for 'new' MG-RAST output
### tables with structure "metagenomeID.DB.taxonlevel.csv"
### Table should be read in as tab-separated .csv file.
### By Lee Stanish June 27, 2016
tax <- x[,1]
alltax <- str_split_fixed(as.character(tax), pattern=";",n=6)
colnames(alltax) <- c("domain", "phylum", "class", "order", "family","genus", "species")
alltax <- data.frame(alltax)
return(alltax)
}
taxonomy <- fill.taxonomy.newMG(merged_OTU$Taxonomy)   # check that #columns in otu.t=length of taxonomy
str(taxonomy)
head(rownames(merged_OTU))
fill.taxonomy.newMG <- function(x) {
### Parses taxon names in abundance table. Specific for 'new' MG-RAST output
### tables with structure "metagenomeID.DB.taxonlevel.csv"
### Table should be read in as tab-separated .csv file.
### By Lee Stanish June 27, 2016
#tax <- x[,1]
alltax <- str_split_fixed(as.character(tax), pattern=";",n=6)
colnames(alltax) <- c("domain", "phylum", "class", "order", "family","genus", "species")
alltax <- data.frame(alltax)
return(alltax)
}
taxonomy <- fill.taxonomy.newMG(merged_OTU$Taxonomy)   # check that #columns in otu.t=length of taxonomy
fill.taxonomy.newMG <- function(x) {
### Parses taxon names in abundance table. Specific for 'new' MG-RAST output
### tables with structure "metagenomeID.DB.taxonlevel.csv"
### Table should be read in as tab-separated .csv file.
### By Lee Stanish June 27, 2016
#tax <- x[,1]
tax <- x
alltax <- str_split_fixed(as.character(tax), pattern=";",n=6)
colnames(alltax) <- c("domain", "phylum", "class", "order", "family","genus", "species")
alltax <- data.frame(alltax)
return(alltax)
}
taxonomy <- fill.taxonomy.newMG(merged_OTU$Taxonomy)   # check that #columns in otu.t=length of taxonomy
rm(list=ls())
library('stringr')
library('lessR') #for Sort()
library('vegan') #ecology functions
library("dplyr")
library("plyr") #for join()
#merges two files by a specified column
mergeData <- function(fileA, fileB){
combinedData <- merge(x = fileA, y = fileB, by="Taxonomy", all=TRUE)
combinedData[is.na(combinedData)] <- 0 #replace NAs with 0s
return(combinedData)
}
#removes uneeded columns
cleanFile <- function(afile){
afile <- afile[,-4] #delete phantom empty column
afile <- afile[,-1] #delete taxon column
return(afile)
}
#filters out non-target genomic data
cleanTaxon <- function (df){
df <- filter(df,grepl("virus",df$Taxonomy)==FALSE)
df <- filter(df,grepl("Eukaryota",df$Taxonomy)==FALSE)
df <- filter(df,grepl("Archaea",df$Taxonomy)==FALSE)
df <- filter(df,grepl("unclassified",df$Taxonomy)==FALSE)
return(df)
}
fill.taxonomy.newMG <- function(x) {
### Parses taxon names in abundance table. Specific for 'new' MG-RAST output
### tables with structure "metagenomeID.DB.taxonlevel.csv"
### Table should be read in as tab-separated .csv file.
### By Lee Stanish June 27, 2016
#tax <- x[,1]
tax <- x
alltax <- str_split_fixed(as.character(tax), pattern=";",n=7)
colnames(alltax) <- c("domain", "phylum", "class", "order", "family","genus", "species")
alltax <- data.frame(alltax)
return(alltax)
}
t.otu <- function(x, s, e) {
## Written by Lee Stanish
## transpose OTU table for ordination analysis##
## x=OTU table; s=starting column; e=ending column
x <- as.data.frame(x)
x1 <- t(x[,c(s:e)])      # transpose OTU counts
colnames(x1) <- x[,1]     #replace OTU ids as column names
x1
}
if (file.exists(
"C:/Users/fjanz/Documents/GitHub/NEON-Internship-2016")){
setwd("C:/Users/fjanz/Documents/GitHub/NEON-Internship-2016")
}
if (file.exists(
"/Users/lstanish/Github/NEON-Internship-2016")){
setwd("/Users/lstanish/Github/NEON-Internship-2016")
}
#read in file with ID mapping info
IDfile <- read.csv("SampleID_metadata/ID_mapping_file.csv")
#remove uneeded columns
IDfile <- IDfile[,-1]
if (file.exists(
"C:/Users/fjanz/Documents/GitHub/NEON-Internship-2016/metagenome_tables/OTUtables/MGdata")){
setwd("C:/Users/fjanz/Documents/GitHub/NEON-Internship-2016/metagenome_tables/OTUtables/MGdata")
directory <- ("C:/Users/fjanz/Documents/GitHub/NEON-Internship-2016/metagenome_tables/OTUtables/MGdata")
}
#tell R where to look for things
if (file.exists(
"/Users/lstanish/Github/NEON-Internship-2016")){
setwd("/Users/lstanish/Github/NEON-Internship-2016/metagenome_tables/OTUtables/MGdata/")
directory <- "/Users/lstanish/Github/NEON-Internship-2016/metagenome_tables/OTUtables/MGdata/"
}
files <- list.files(directory, full.names = FALSE)
testFile <- readLines(files[1],2539)
file1 <- read.table(files[1],quote = "", sep='\t',header=TRUE, skip = 2)
file2 <- read.table(files[2],quote = "", sep='\t',header=TRUE, skip = 2)
file1 <- cleanFile(file1)
file2 <- cleanFile(file2)
#combine first two files
MGotu <- as.data.frame(mergeData(file1,file2))
END <- length(files)
#read in and merge remaining files
for (i in 3:END){
tempfile <- read.table(files[i], quote = "", sep="\t", skip = 2,header = TRUE)
tempfile <- cleanFile(tempfile)
MGotu <- as.data.frame(mergeData(MGotu,tempfile))
}
#filter unwanted data
MGotu <- cleanTaxon(MGotu)
#split out taxonomic info
MGtaxa <- fill.taxonomy.newMG(MGotu$Taxonomy)
#transpose columns and rows and organize to prep for diversity analysis
MGotu_flip <- t.otu(x=MGotu,s=2,e=(END + 1))
MGotu_flip <- Sort(by=row.names,data=MGotu_flip)
#repeat process for composite data
if(file.exists(
"C:/Users/fjanz/Documents/GitHub/NEON-Internship-2016/metagenome_tables/OTUtables/Cdata")) {
setwd("C:/Users/fjanz/Documents/GitHub/NEON-Internship-2016/metagenome_tables/OTUtables/Cdata")
directory <- ("C:/Users/fjanz/Documents/GitHub/NEON-Internship-2016/metagenome_tables/OTUtables/Cdata")
}
if(file.exists(
"/Users/lstanish/Github/NEON-Internship-2016/metagenome_tables/OTUtables/Cdata")) {
setwd("/Users/lstanish/Github/NEON-Internship-2016/metagenome_tables/OTUtables/Cdata")
directory <- ("/Users/lstanish/Github/NEON-Internship-2016/metagenome_tables/OTUtables/Cdata")
}
files <- list.files(directory, full.names = FALSE)
file1 <- read.table(files[1],quote = "", sep='\t', skip = 2, header=TRUE)
file2 <- read.table(files[2],quote = "", sep="\t", skip = 2, header = TRUE)
file1 <- cleanFile(file1)
file2 <- cleanFile(file2)
Cotu <- mergeData(file1,file2)
END2 <- length(files)
for (i in 3:END2){
tempfile <- read.table(files[i], quote = "", sep="\t", skip = 2, header = TRUE)
tempfile <- cleanFile(tempfile)
Cotu <- mergeData(Cotu,tempfile)
}
Cotu <- cleanTaxon(Cotu)
Ctaxa <- fill.taxonomy.newMG(Cotu$Taxonomy)
Cotu_flip <- t.otu(x=Cotu,s=2,e=(END2+1))
Cotu_flip <- Sort(by=row.names,data=Cotu_flip)
#----------------------------------------------------------------------------------------------------------------------
##### Diversity analyses on all 38 files for each sample method #####
Cdiv <- (rep(0,END2))
abundanceC <- (rep(0,END2))
for (i in 1:(END2)){
Cdiv[i] <- diversity(as.numeric(Cotu_flip[i,]))
abundanceC[i] <- specnumber(Cotu_flip[i,])
}
MGdiv <- (rep(0,END))
abundanceM <- (rep(0,END))
for (i in 1:(END)){
MGdiv[i] <- diversity(as.numeric(MGotu_flip[i,]))
abundanceM[i] <- specnumber(MGotu_flip[i,])
}
#convert diversity measures to data frames
Cdiv <- as.data.frame(Cdiv)
MGdiv <- as.data.frame(MGdiv)
abundanceC <- as.data.frame(abundanceC)
abundanceM <- as.data.frame(abundanceM)
#-----------------------------------------------------------------------------------------------------------------------
##### combine data #####
#add names for merging
MGplotnames <- rownames(MGotu_flip)
Cplotnames <- rownames(Cotu_flip)
rownames(MGdiv) <- MGplotnames
rownames(Cdiv) <- Cplotnames
rownames(abundanceM) <- MGplotnames
rownames(abundanceC) <- Cplotnames
sampleTypes <- matrix(nrow=END,ncol=2)
sampleTypes[,1] <- rep("Individual",END)
sampleTypes[,2] <- rep("Composite", END2)
#create empty data frames for graphing
divDF <- data.frame(metagenomeID=as.character(),
sampleType=as.character(),
ShannonIndex=as.numeric(),
stringsAsFactors = FALSE)
specRich <- data.frame(metagenomeID=as.character(),
sampleType=as.character(),
speciesRichness=as.numeric(),
stringsAsFactors = FALSE)
e <- length(MGplotnames)*2 #counter that = total number of samples
j <- 1
#fill graphing data frame
for(i in 1:e){
if (i <= (e/2)){
divDF[i,1] <- MGplotnames[i] #create column of sample IDs
divDF[i,2] <- sampleTypes[i,1] #"Individual"
divDF[i,3] <- MGdiv[i,1] #diversity measure
specRich[i,1] <- MGplotnames[i]
specRich[i,2] <- sampleTypes[i,1]
specRich[i,3] <- abundanceM[i,1]
} else {
divDF[i,1] <- Cplotnames[j]
divDF[i,2] <- sampleTypes[j,2] #"Composite"
divDF[i,3] <- Cdiv[j,1]
specRich[i,1] <- Cplotnames[j]
specRich[i,2] <- sampleTypes[j,2]
specRich[i,3] <- abundanceC[j,1]
j <- j + 1
}
}
#create columns for easy sorting during graphing
divDF <- merge(divDF,IDfile,by="metagenomeID") #the fields sampleID and Event_name come with IDfile
divDF$siteID <- stringr::str_sub(divDF$sampleID,1,4)
divDF$plotID <- stringr::str_sub(divDF$sampleID,1,8)
#repeat for species richness object
specRich <- merge(specRich,IDfile,by="metagenomeID")
specRich$siteID <- stringr::str_sub(specRich$sampleID,1,4)
specRich$plotID <- stringr::str_sub(specRich$sampleID,1,8)
specRich <- specRich[order(specRich$Event_name),]
#create and order metadata to use with merged_OTU (see below)
metadata <- divDF[order(divDF$metagenomeID),]
metadata$SpeciesRichness <- specRich$speciesRichness
divDF <- divDF[order(divDF$Event_name),] #sort alpha diversity object
#merge Individual and Composite OTU tables
merged_OTU <- plyr::join(MGotu,Cotu, type="full",match="all")
merged_OTU[is.na(merged_OTU)] <- 0 #replace NAs with 0s
#make taxon names row names
row.names(merged_OTU) <- merged_OTU$Taxonomy
merged_OTU <- merged_OTU[,-1]
#organize beta diversity object
temp_obj <- order(names(merged_OTU))
merged_OTU <- merged_OTU[,temp_obj]
#check that the columns of merged_OTU are in the same order as the ID's in metadata
col <- colnames(merged_OTU)
confirm <- rep(NA,e)
for (i in 1:e){
if (metadata[i,1] == col[i]){
confirm[i] <- TRUE
} else {
confirm[i] <- FALSE
}
}
#replaces long sample ID with cleaned version of ID if everything is ordered properly
if (confirm[sample(seq(1,e),1)] == TRUE){
colnames(merged_OTU) <- metadata$sampleID
}else {
print("Error! Object names don't match")
}
#save beta diversity object to use with process_OTU_table.r
if (file.exists("C:/Users/fjanz/Documents/GitHub/NEON-Internship-2016")){
setwd("C:/Users/fjanz/Documents/GitHub/NEON-Internship-2016")
}else if (file.exists("/Users/lstanish/Github/NEON-Internship-2016")){
setwd("/Users/lstanish/Github/NEON-Internship-2016")
}
write.csv(merged_OTU,"Metagenome_beta_div_data.csv")
write.csv(metadata,"Metagenome_beta_div_metadata.csv")
rm(list=ls())
library(vegan)
library(ggplot2)
library(grid)
t.otu <- function(x, s, e) {
## Written by Lee Stanish
## transpose OTU table for ordination analysis##
## x=OTU table; s=starting column; e=ending column
x <- as.data.frame(x)
x1 <- t(x[,c(s:e)])      # transpose OTU counts
colnames(x1) <- x[,1]     #replace OTU ids as column names
x1
}
otu <- read.csv("Metagenome_beta_div_data.csv")
View(otu)
otu <- read.csv("Metagenome_beta_div_data.csv",header = FALSE)
View(otu)
otu.t <- t.otu(x=otu[-1,],s=2,e=length(otu))
View(otu.t)
ncol(otu.t)
rownames(otu.t) <- names(otu)
rownames(otu.t) <- otu[1,]
View(otu.t)
rownames(otu.t) <- otu[1,2:77]
rownames(otu.t) <- otu[1,c(2:77)]
View(otu.t)
otu.t <- t.otu(x=otu[-1,],s=2,e=length(otu))  # adjust numbers as needed for your OTU table
View(otu.t)
head(rownames(otu.t))
otu[1,c(2:77)]
otu <- read.csv("Metagenome_beta_div_data.csv",header = TRUE)
otu.t <- t.otu(x=otu,s=2,e=length(otu))
View(otu.t)
ncol(otu.t)
View(otu)
taxonomy <- fill.taxonomy.newMG(otu$X)
fill.taxonomy.newMG <- function(x) {
### Parses taxon names in abundance table. Specific for 'new' MG-RAST output
### tables with structure "metagenomeID.DB.taxonlevel.csv"
### Table should be read in as tab-separated .csv file.
### By Lee Stanish June 27, 2016
#tax <- x[,1]
tax <- x
alltax <- str_split_fixed(as.character(tax), pattern=";",n=7)
colnames(alltax) <- c("domain", "phylum", "class", "order", "family","genus", "species")
alltax <- data.frame(alltax)
return(alltax)
}
source("/R Scripts/process_data2.r")
source("C:/Users/fjanz/Documents/GitHub/NEON-Internship-2016/R Scripts/process_data2.r")
rm(list=ls())
t.otu <- function(x, s, e) {
## Written by Lee Stanish
## transpose OTU table for ordination analysis##
## x=OTU table; s=starting column; e=ending column
x <- as.data.frame(x)
x1 <- t(x[,c(s:e)])      # transpose OTU counts
colnames(x1) <- x[,1]     #replace OTU ids as column names
x1
}
fill.taxonomy.newMG <- function(x) {
### Parses taxon names in abundance table. Specific for 'new' MG-RAST output
### tables with structure "metagenomeID.DB.taxonlevel.csv"
### Table should be read in as tab-separated .csv file.
### By Lee Stanish June 27, 2016
#tax <- x[,1]
tax <- x
alltax <- str_split_fixed(as.character(tax), pattern=";",n=7)
colnames(alltax) <- c("domain", "phylum", "class", "order", "family","genus", "species")
alltax <- data.frame(alltax)
return(alltax)
}
setwd("C:/Users/fjanz/Documents/GitHub/NEON-Internship-2016")
otu <- read.csv("Metagenome_beta_div_data.csv",header = TRUE)  # set to your file
## transpose OTU table using function t.otu
otu.t <- t.otu(x=otu,s=2,e=length(otu))  # adjust numbers as needed for your OTU table
ncol(otu.t)
#rownames(otu.t) <- otu[1,c(2:77)]
taxonomy <- fill.taxonomy.newMG(otu$X)
View(taxonomy)
diversity(otu.t)
test1 <- diversity(otu.t)
test1
test2 <- specnumber(otu.t)
test2
tototu <- apply(otu.t, MARGIN=1, FUN=sum)
min(tototu)
oturare <- rrarefy(otu.t, min(tototu))
?rarecurve
rarecurve(otu.t, step=100000,sample=min(tototu))
otumax <- apply(oturare, 2, max)
otu.1 <- oturare[, otumax >= 1]
taxonomy.1 <- droplevels(taxonomy[otumax >= 1])
taxonomy.1 <- droplevels(taxonomy[otumax >= 1,])
which(otumx==0)
which(otumax==0)
?apply
View(oturare)
View(taxonomy.1)
otu.hell <- decostand(otu.1, method="hellinger")
View(otu.hell)
otu.pct <- decostand(otu.1, method="total")
sum(otu.pct[1,])
mds <- metaMDS(otu.hell, k=3, distance="bray", trymax=20, autotransform=FALSE)
mds <- metaMDS(otu.hell, k=2, distance="bray", trymax=20, autotransform=FALSE)
diss <- vegdist(otu.hell, distance="bray")
stressplot(mds, diss)
mds.sc <- scores(mds, display="sites", choices=c(1:2))
mds.spec <- scores(mds, display="species", choices=c(1:2))
View(mds.sc)
View(mds.spec)
plot(mds, type="p", choices=c(1,2), cex.lab=1.5,cex.axis=1.5,font=1.5,font.axis=2,font.lab=1.5)
mds.sc <- data.frame(mds.sc)
env <- read.csv(Metagenome_beta_div_metadata.csv)
setwd("C:/Users/fjanz/Documents/GitHub/NEON-Internship-2016")
env <- read.csv(Metagenome_beta_div_metadata.csv)
env <- read.csv("Metagenome_beta_div_metadata.csv")
ggplot(mds.sc, aes(NMDS1, NMDS2)) +
geom_point(data=mds.sc,aes(NMDS1, NMDS2, shape=env$siteID), colour="darkgrey") +
#geom_segment(data=fit.df, aes(x=0, xend=NMDS1, y=0, yend=NMDS2), arrow=arrow(length=unit(0.2,"cm")), colour="black", inherit_aes=FALSE) +
#geom_text(data=fit.df, aes(x=NMDS1*1.1, y=NMDS2*1.1, label=species), size=4.2)+ coord_fixed() +
guides(shape=guide_legend("Disinfectant")) +
theme_bw() +
theme(axis.title=element_text(size=14),
axis.text=element_text(size=11),
legend.key=element_blank(),
legend.key=element_rect(colour="white"),
legend.text=element_text(size=11),
legend.title=element_text(size=11))
ggplot(mds.sc, aes(NMDS1, NMDS2)) +
geom_point(data=mds.sc,aes(NMDS1, NMDS2, shape=env$siteID, size=4), colour="black") +
#geom_segment(data=fit.df, aes(x=0, xend=NMDS1, y=0, yend=NMDS2), arrow=arrow(length=unit(0.2,"cm")), colour="black", inherit_aes=FALSE) +
#geom_text(data=fit.df, aes(x=NMDS1*1.1, y=NMDS2*1.1, label=species), size=4.2)+ coord_fixed() +
guides(shape=guide_legend("Disinfectant")) +
theme_bw() +
theme(axis.title=element_text(size=14),
axis.text=element_text(size=11),
legend.key=element_blank(),
legend.key=element_rect(colour="white"),
legend.text=element_text(size=11),
legend.title=element_text(size=11))
ggplot(mds.sc, aes(NMDS1, NMDS2)) +
geom_point(data=mds.sc,aes(NMDS1, NMDS2, shape=env$siteID, size=4), colour=env$sampleType) +
#geom_segment(data=fit.df, aes(x=0, xend=NMDS1, y=0, yend=NMDS2), arrow=arrow(length=unit(0.2,"cm")), colour="black", inherit_aes=FALSE) +
#geom_text(data=fit.df, aes(x=NMDS1*1.1, y=NMDS2*1.1, label=species), size=4.2)+ coord_fixed() +
guides(shape=guide_legend("Disinfectant")) +
theme_bw() +
theme(axis.title=element_text(size=14),
axis.text=element_text(size=11),
legend.key=element_blank(),
legend.key=element_rect(colour="white"),
legend.text=element_text(size=11),
legend.title=element_text(size=11))
ggplot(mds.sc, aes(NMDS1, NMDS2)) +
geom_point(data=mds.sc,aes(NMDS1, NMDS2, shape=env$siteID, size=4), colour=as.integer(env$sampleType)) +
#geom_segment(data=fit.df, aes(x=0, xend=NMDS1, y=0, yend=NMDS2), arrow=arrow(length=unit(0.2,"cm")), colour="black", inherit_aes=FALSE) +
#geom_text(data=fit.df, aes(x=NMDS1*1.1, y=NMDS2*1.1, label=species), size=4.2)+ coord_fixed() +
guides(shape=guide_legend("Disinfectant")) +
theme_bw() +
theme(axis.title=element_text(size=14),
axis.text=element_text(size=11),
legend.key=element_blank(),
legend.key=element_rect(colour="white"),
legend.text=element_text(size=11),
legend.title=element_text(size=11))
ggplot(mds.sc, aes(NMDS1, NMDS2)) +
geom_point(data=mds.sc,aes(NMDS1, NMDS2, shape=env$siteID, size=4, fill=env$sampleType), colour="black") +
#geom_segment(data=fit.df, aes(x=0, xend=NMDS1, y=0, yend=NMDS2), arrow=arrow(length=unit(0.2,"cm")), colour="black", inherit_aes=FALSE) +
#geom_text(data=fit.df, aes(x=NMDS1*1.1, y=NMDS2*1.1, label=species), size=4.2)+ coord_fixed() +
guides(shape=guide_legend("Disinfectant")) +
theme_bw() +
theme(axis.title=element_text(size=14),
axis.text=element_text(size=11),
legend.key=element_blank(),
legend.key=element_rect(colour="white"),
legend.text=element_text(size=11),
legend.title=element_text(size=11))
ggplot(mds.sc, aes(NMDS1, NMDS2)) +
geom_point(data=mds.sc,aes(NMDS1, NMDS2, shape=env$siteID, size=4, color=env$sampleType), colour="black") +
#geom_segment(data=fit.df, aes(x=0, xend=NMDS1, y=0, yend=NMDS2), arrow=arrow(length=unit(0.2,"cm")), colour="black", inherit_aes=FALSE) +
#geom_text(data=fit.df, aes(x=NMDS1*1.1, y=NMDS2*1.1, label=species), size=4.2)+ coord_fixed() +
guides(shape=guide_legend("Disinfectant")) +
theme_bw() +
theme(axis.title=element_text(size=14),
axis.text=element_text(size=11),
legend.key=element_blank(),
legend.key=element_rect(colour="white"),
legend.text=element_text(size=11),
legend.title=element_text(size=11))
ggplot(mds.sc, aes(NMDS1, NMDS2)) +
geom_point(data=mds.sc,aes(NMDS1, NMDS2, shape=env$siteID, size=4, color=env$sampleType), colour=c("black","tomato")) +
#geom_segment(data=fit.df, aes(x=0, xend=NMDS1, y=0, yend=NMDS2), arrow=arrow(length=unit(0.2,"cm")), colour="black", inherit_aes=FALSE) +
#geom_text(data=fit.df, aes(x=NMDS1*1.1, y=NMDS2*1.1, label=species), size=4.2)+ coord_fixed() +
guides(shape=guide_legend("Disinfectant")) +
theme_bw() +
theme(axis.title=element_text(size=14),
axis.text=element_text(size=11),
legend.key=element_blank(),
legend.key=element_rect(colour="white"),
legend.text=element_text(size=11),
legend.title=element_text(size=11))
ggplot(mds.sc, aes(NMDS1, NMDS2)) +
geom_point(data=mds.sc,aes(NMDS1, NMDS2, shape=env$siteID, size=4, color=env$sampleType)) +
#geom_segment(data=fit.df, aes(x=0, xend=NMDS1, y=0, yend=NMDS2), arrow=arrow(length=unit(0.2,"cm")), colour="black", inherit_aes=FALSE) +
#geom_text(data=fit.df, aes(x=NMDS1*1.1, y=NMDS2*1.1, label=species), size=4.2)+ coord_fixed() +
guides(shape=guide_legend("Disinfectant")) +
theme_bw() +
theme(axis.title=element_text(size=14),
axis.text=element_text(size=11),
legend.key=element_blank(),
legend.key=element_rect(colour="white"),
legend.text=element_text(size=11),
legend.title=element_text(size=11))
adonis(diss~State, data=env$sampleType)
