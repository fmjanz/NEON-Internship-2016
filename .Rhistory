install.packages("MGRASTer")
install.packages("RJSONIO")
url <- as.character("http://api.metagenomics.anl.gov/1/download/")
mgID <- as.character("4637812.3")
APIobj <- call.MGRAST(url,id=mgID,file=350.1)
install.packages("vegan")
setwd("D:\NEON2\")
setwd("C:\Users\fjanz\Documents")
setwd("C:/Users/fjanz/Documents")
file1 <- read.csv("mgm4637809.3.RS.species.csv",sep='\t')
file1 <- read.csv("mgm4637809.3.RS.species.csv",sep='\t',header=F)
View(file1)
?aov
library('stringr')
library('lessR') #for Sort()
library('vegan') #ecology functions
library("dplyr")
#merges two files by a specified column
mergeData <- function(fileA, fileB){
combinedData <- merge(x = fileA, y = fileB, by="Taxonomy", all=TRUE)
combinedData[is.na(combinedData)] <- 0 #replace NAs with 0s
return(combinedData)
}
#removes uneeded columns
cleanFile <- function(afile){
afile <- afile[,-4] #delete phantom empty column
afile <- afile[,-1] #delete taxon column
return(afile)
}
#filters out non-microbial genomic data
cleanTaxon <- function (df){
df <- filter(df,grepl("virus",df$Taxonomy)==FALSE)
df <- filter(df,grepl("Eukaryota",df$Taxonomy)==FALSE)
df <- filter(df,grepl("Eukaryota",df$Taxonomy)==FALSE)
df <- filter(df,grepl("unclassified",df$Taxonomy)==FALSE)
return(df)
}
fill.taxonomy.newMG <- function(x) {
### Parses taxon names in abundance table. Specific for 'new' MG-RAST output
### tables with structure "metagenomeID.DB.taxonlevel.csv"
### Table should be read in as tab-separated .csv file.
### By Lee Stanish June 27, 2016
tax <- x[,1]
alltax <- str_split_fixed(as.character(tax), pattern=";",n=7)
colnames(alltax) <- c("domain", "phylum", "class", "order", "family","genus", "species")
alltax <- data.frame(alltax)
return(alltax)
}
t.otu <- function(x, s, e) {
## Written by Lee Stanish
## transpose OTU table for ordination analysis##
## x=OTU table; s=starting column; e=ending column
x <- as.data.frame(x)
x1 <- t(x[,c(s:e)])      # transpose OTU counts
colnames(x1) <- x[,1]     #replace OTU ids as column names
x1
}
setwd("C:/Users/fjanz/Documents/GitHub/NEON-Internship-2016/metagenome_tables/OTUtables/MGdata")
#tell R where to look for things
directory <- ("C:/Users/fjanz/Documents/GitHub/NEON-Internship-2016/metagenome_tables/OTUtables/MGdata")
files <- list.files(directory, full.names = FALSE)
testFile <- readLines(files[1],2539)
file1 <- read.table(files[1],quote = "", sep='\t',header=TRUE, skip = 2)
file2 <- read.table(files[2],quote = "", sep='\t',header=TRUE, skip = 2)
file1 <- cleanFile(file1)
file2 <- cleanFile(file2)
#combine first two files
MGotu <- as.data.frame(mergeData(file1,file2))
END <- length(files)
#read in and merge remaining files
for (i in 3:END){
tempfile <- read.table(files[i], quote = "", sep="\t", skip = 2,header = TRUE)
tempfile <- cleanFile(tempfile)
MGotu <- as.data.frame(mergeData(MGotu,tempfile))
}
#filter unwanted data
MGotu <- cleanTaxon(MGotu)
#split out taxonomic info
MGtaxa <- fill.taxonomy.newMG(MGotu)
#transpose columns and rows and organize to prep for diversity analysis
MGotu_flip <- t.otu(x=MGotu,s=2,e=END)
MGotu_flip <- Sort(by=row.names,data=MGotu_flip)
#repeat process for composite data
setwd("C:/Users/fjanz/Documents/GitHub/NEON-Internship-2016/metagenome_tables/OTUtables/Cdata")
directory <- ("C:/Users/fjanz/Documents/GitHub/NEON-Internship-2016/metagenome_tables/OTUtables/Cdata")
files <- list.files(directory, full.names = FALSE)
file1 <- read.table(files[1],quote = "", sep='\t', skip = 2, header=TRUE)
file2 <- read.table(files[2],quote = "", sep="\t", skip = 2, header = TRUE)
file1 <- cleanFile(file1)
file2 <- cleanFile(file2)
Cotu <- mergeData(file1,file2)
END2 <- length(files)
for (i in 3:END2){
tempfile <- read.table(files[i], quote = "", sep="\t", skip = 2, header = TRUE)
tempfile <- cleanFile(tempfile)
Cotu <- mergeData(Cotu,tempfile)
}
Cotu <- cleanTaxon(Cotu)
Ctaxa <- fill.taxonomy.newMG(Cotu)
Cotu_flip <- t.otu(x=Cotu,s=2,e=END2)
Cotu_flip <- Sort(by=row.names,data=Cotu_flip)
View(Cotu_flip)
View(MGotu_flip)
mod <- aov(DIV~SAMPLETYPE)
rm(list=ls())
setwd("C:/Users/fjanz/Documents/GitHub/NEON-Internship-2016")
#read in file with ID mapping info
IDfile <- read.csv("MGRAST_metadata_20160210")
setwd("C:/Users/fjanz/Documents/GitHub/NEON-Internship-2016")
#read in file with ID mapping info
IDfile <- read.csv("MGRAST_metadata_20160210.csv")
View(IDfile)
IDfile <- IDfile[-1,]
IDfile <- read.csv("MGRAST_metadata_20160210.csv")
IDfile <- IDfile[,-1]
for (i in 3:16){
IDfile <- IDfile[,-i]
}
IDfile <- read.csv("MGRAST_metadata_20160210.csv")
IDfile <- IDfile[,-1]
for (i in 16:3){
IDfile <- IDfile[,-i]
}
setwd("C:/Users/fjanz/Documents/GitHub/NEON-Internship-2016/metagenome_tables/OTUtables/MGdata")
#tell R where to look for things
directory <- ("C:/Users/fjanz/Documents/GitHub/NEON-Internship-2016/metagenome_tables/OTUtables/MGdata")
files <- list.files(directory, full.names = FALSE)
testFile <- readLines(files[1],2539)
file1 <- read.table(files[1],quote = "", sep='\t',header=TRUE, skip = 2)
file2 <- read.table(files[2],quote = "", sep='\t',header=TRUE, skip = 2)
file1 <- cleanFile(file1)
file2 <- cleanFile(file2)
library('stringr')
library('lessR') #for Sort()
library('vegan') #ecology functions
library("dplyr")
#merges two files by a specified column
mergeData <- function(fileA, fileB){
combinedData <- merge(x = fileA, y = fileB, by="Taxonomy", all=TRUE)
combinedData[is.na(combinedData)] <- 0 #replace NAs with 0s
return(combinedData)
}
#removes uneeded columns
cleanFile <- function(afile){
afile <- afile[,-4] #delete phantom empty column
afile <- afile[,-1] #delete taxon column
return(afile)
}
#filters out non-microbial genomic data
cleanTaxon <- function (df){
df <- filter(df,grepl("virus",df$Taxonomy)==FALSE)
df <- filter(df,grepl("Eukaryota",df$Taxonomy)==FALSE)
df <- filter(df,grepl("Eukaryota",df$Taxonomy)==FALSE)
df <- filter(df,grepl("unclassified",df$Taxonomy)==FALSE)
return(df)
}
fill.taxonomy.newMG <- function(x) {
### Parses taxon names in abundance table. Specific for 'new' MG-RAST output
### tables with structure "metagenomeID.DB.taxonlevel.csv"
### Table should be read in as tab-separated .csv file.
### By Lee Stanish June 27, 2016
tax <- x[,1]
alltax <- str_split_fixed(as.character(tax), pattern=";",n=7)
colnames(alltax) <- c("domain", "phylum", "class", "order", "family","genus", "species")
alltax <- data.frame(alltax)
return(alltax)
}
t.otu <- function(x, s, e) {
## Written by Lee Stanish
## transpose OTU table for ordination analysis##
## x=OTU table; s=starting column; e=ending column
x <- as.data.frame(x)
x1 <- t(x[,c(s:e)])      # transpose OTU counts
colnames(x1) <- x[,1]     #replace OTU ids as column names
x1
}
file1 <- cleanFile(file1)
file2 <- cleanFile(file2)
MGotu <- as.data.frame(mergeData(file1,file2))
END <- length(files)
#read in and merge remaining files
for (i in 3:END){
tempfile <- read.table(files[i], quote = "", sep="\t", skip = 2,header = TRUE)
tempfile <- cleanFile(tempfile)
MGotu <- as.data.frame(mergeData(MGotu,tempfile))
}
View(MGotu)
MGotu <- cleanTaxon(MGotu)
MGtaxa <- fill.taxonomy.newMG(MGotu)
View(MGtaxa)
View(MGotu)
View(MGtaxa)
MGotu_flip <- t.otu(x=MGotu,s=2,e=END)
View(MGotu_flip)
setwd("C:/Users/fjanz/Documents/GitHub/NEON-Internship-2016/metagenome_tables/OTUtables/Cdata")
directory <- ("C:/Users/fjanz/Documents/GitHub/NEON-Internship-2016/metagenome_tables/OTUtables/Cdata")
files <- list.files(directory, full.names = FALSE)
file1 <- read.table(files[1],quote = "", sep='\t', skip = 2, header=TRUE)
file2 <- read.table(files[2],quote = "", sep="\t", skip = 2, header = TRUE)
file1 <- cleanFile(file1)
file2 <- cleanFile(file2)
Cotu <- mergeData(file1,file2)
END2 <- length(files)
for (i in 3:END2){
tempfile <- read.table(files[i], quote = "", sep="\t", skip = 2, header = TRUE)
tempfile <- cleanFile(tempfile)
Cotu <- mergeData(Cotu,tempfile)
}
Cotu <- cleanTaxon(Cotu)
Ctaxa <- fill.taxonomy.newMG(Cotu)
Cotu_flip <- t.otu(x=Cotu,s=2,e=END2)
Cotu_flip <- Sort(by=row.names,data=Cotu_flip)
Cdiv <- (rep(0,END2-1))
abundanceC <- (rep(0,END2-1))
for (i in 1:(END2-1)){
Cdiv[i] <- diversity(as.numeric(Cotu_flip[i,]))
abundanceC[i] <- specnumber(Cotu_flip[i,])
}
MGdiv <- (rep(0,END-1))
abundanceM <- (rep(0,END-1))
for (i in 1:(END-1)){
MGdiv[i] <- diversity(as.numeric(MGotu_flip[i,]))
abundanceM[i] <- specnumber(MGotu_flip[i,])
}
#convert diversity measures to data frames
Cdiv <- as.data.frame(Cdiv)
MGdiv <- as.data.frame(MGdiv)
abundanceC <- as.data.frame(abundanceC)
abundanceM <- as.data.frame(abundanceM)
#add names for merging
MGplotnames <- rownames(MGotu_flip)
Cplotnames <- rownames(Cotu_flip)
rownames(MGdiv) <- MGplotnames
rownames(Cdiv) <- Cplotnames
rownames(abundanceM) <- MGplotnames
rownames(abundanceC) <- Cplotnames
View(MGdiv)
div <- as.matrix(cbind(MGdiv,Cdiv))
abundance <- as.matrix(cbind(abundanceM,abundanceC))
plotnames <- rownames(div)
View(div)
div$sampleID <- IDfile$sampleID
IDfile$new <- c("a","b","c")
View(MGotu_flip)
setwd("C:/Users/fjanz/Documents/GitHub/NEON-Internship-2016")
#read in file with ID mapping info
IDfile <- read.csv("ID_mapping_file.csv")
#remove uneeded columns
IDfile <- IDfile[,-1]
for (i in 16:3){
IDfile <- IDfile[,-i]
}
IDfile <- read.csv("ID_mapping_file.csv")
IDfile <- IDfile[,-1]
div$sampleID <- IDfile$sampleID
div <- as.matrix(cbind(MGdiv,Cdiv))
div$sampleID <- IDfile$sampleID
div
div <- as.matrix(cbind(MGdiv,Cdiv))
div["sampleID"] <- IDfile$sampleID
div["sampleID"] <- rep(NA,74)
div <- as.matrix(cbind(MGdiv,Cdiv))
div["sampleID"] <- rep(NA,74)
div <- as.matrix(cbind(MGdiv,Cdiv))
div$sampleID <- rep(NA,74)
sampleTypes <- matrix(nrow=37,ncol=2)
sampleTypes[,1] <- rep("Individual",37)
sampleTypes[,2] <- rep("Composite", 37)
#create empty data frame for graphing
divDF <- data.frame(SiteID=as.character(),
SampleType=as.character(),
ShannonIndex=as.numeric(),
stringsAsFactors = FALSE)
e <- length(plotnames)*2 #number of samples
j <- 1
#fill graphing data frame
for(i in 1:e){
if (i <= (e/2)){
divDF[i,1] <- MGplotnames[i]
divDF[i,2] <- sampleTypes[i,1]
divDF[i,3] <- MGdiv[i,1]
} else {
divDF[i,1] <- Cplotnames[j]
divDF[i,2] <- sampleTypes[j,2]
divDF[i,3] <- Cdiv[j,1]
j <- j + 1
}
}
div <- as.matrix(cbind(MGdiv,Cdiv))
divDF <- divDF + IDfile
View(divDF)
IDfile <- read.csv("ID_mapping_file.csv")
divDF <- data.frame(SiteID=as.character(),
SampleType=as.character(),
ShannonIndex=as.numeric(),
stringsAsFactors = FALSE)
e <- length(plotnames)*2 #number of samples
j <- 1
#fill graphing data frame
for(i in 1:e){
if (i <= (e/2)){
divDF[i,1] <- MGplotnames[i]
divDF[i,2] <- sampleTypes[i,1]
divDF[i,3] <- MGdiv[i,1]
} else {
divDF[i,1] <- Cplotnames[j]
divDF[i,2] <- sampleTypes[j,2]
divDF[i,3] <- Cdiv[j,1]
j <- j + 1
}
}
divDF <- divDF + IDfile
setwd("C:/Users/fjanz/Documents/GitHub/NEON-Internship-2016")
#read in file with ID mapping info
IDfile <- read.csv("ID_mapping_file.csv")
#remove uneeded columns
IDfile <- IDfile[,-1]
setwd("C:/Users/fjanz/Documents/GitHub/NEON-Internship-2016")
#read in file with ID mapping info
IDfile <- read.csv("ID_mapping_file.csv")
#remove uneeded columns
IDfile <- IDfile[,-1]
