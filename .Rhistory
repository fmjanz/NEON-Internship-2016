library("stats")
aShan <- aov(ShannonIndex ~ siteID * sampleType, data = divDF) #take out TALL
aSR <- aov(speciesRichness ~ siteID * sampleType, data=specRich)
aShan2 <- aov(ShannonIndex ~ sampleType, data=divDF)
aSR2 <- aov(speciesRichness ~ siteID, data=specRich)
summary(aShan)
a <- aov(ShannonIndex ~ siteID, data = divDF)
summary(a)
summary(aSR)
TukeyHSD(aShan)
aShan <- aov(ShannonIndex ~ siteID * sampleType, data = divDF) #take out TALL
summary(aShan)
aShan2 <- aov(ShannonIndex ~ sampleType, data=divDF)
summary(aShan2)
summary(aSR)
rm(list=ls())
mergeData <- function(fileA, fileB){
combinedData <- merge(x = fileA, y = fileB, by="Taxonomy", all=TRUE)
combinedData[is.na(combinedData)] <- 0 #replace NAs with 0s
return(combinedData)
}
#removes uneeded columns
cleanFile <- function(afile){
afile <- afile[,-4] #delete phantom empty column
afile <- afile[,-1] #delete taxon column
return(afile)
}
#filters out non-target genomic data
cleanTaxon <- function (df){
df <- filter(df,grepl("virus",df$Taxonomy)==FALSE)
df <- filter(df,grepl("Eukaryota",df$Taxonomy)==FALSE)
df <- filter(df,grepl("Archaea",df$Taxonomy)==FALSE)
df <- filter(df,grepl("unclassified",df$Taxonomy)==FALSE)
return(df)
}
t.otu <- function(x, s, e) {
## Written by Lee Stanish
## transpose OTU table for ordination analysis##
## x=OTU table; s=starting column; e=ending column
x <- as.data.frame(x)
x1 <- t(x[,c(s:e)])      # transpose OTU counts
colnames(x1) <- x[,1]     #replace OTU ids as column names
x1
}
#---------------------------------------------------------------------------------------------------------------------
#Run main script
## Set working directory
if (file.exists("C:/Users/fjanz/Documents/GitHub/NEON-Internship-2016")){
setwd("C:/Users/fjanz/Documents/GitHub/NEON-Internship-2016")
} else if (file.exists(
"/Users/lstanish/Github/NEON-Internship-2016")){
setwd("/Users/lstanish/Github/NEON-Internship-2016")
} else {
print("Error! No such directory.")
}
#read in file with ID mapping info
IDfile <- read.csv("SampleID_metadata/ID_mapping_file.csv")
#tell R where to look for things
if (file.exists("C:/Users/fjanz/Documents/GitHub/NEON-Internship-2016/metagenome_tables/OTUtables/MGdata")){
setwd("C:/Users/fjanz/Documents/GitHub/NEON-Internship-2016/metagenome_tables/OTUtables/MGdata")
directory <- ("C:/Users/fjanz/Documents/GitHub/NEON-Internship-2016/metagenome_tables/OTUtables/MGdata")
} else if (file.exists("/Users/lstanish/Github/NEON-Internship-2016")){
setwd("/Users/lstanish/Github/NEON-Internship-2016/metagenome_tables/OTUtables/MGdata/")
directory <- "/Users/lstanish/Github/NEON-Internship-2016/metagenome_tables/OTUtables/MGdata/"
} else {
print("Error! No such directory.")
}
files <- list.files(directory, full.names = FALSE)
file1 <- read.table(files[1],quote = "", sep='\t',header=TRUE, skip = 2)
file2 <- read.table(files[2],quote = "", sep='\t',header=TRUE, skip = 2)
file1 <- cleanFile(file1)
file2 <- cleanFile(file2)
#combine first two files
MGotu <- as.data.frame(mergeData(file1,file2))
END <- length(files)
#read in and merge remaining files
for (i in 3:END){
tempfile <- read.table(files[i], quote = "", sep="\t", skip = 2,header = TRUE)
tempfile <- cleanFile(tempfile)
MGotu <- as.data.frame(mergeData(MGotu,tempfile))
}
#filter unwanted data
MGotu <- cleanTaxon(MGotu)
#transpose columns and rows and organize to prep for diversity analysis
MGotu_flip <- t.otu(x=MGotu,s=2,e=(END + 1))
MGotu_flip <- Sort(by=row.names,data=MGotu_flip)
#repeat process for composite data
if(file.exists("C:/Users/fjanz/Documents/GitHub/NEON-Internship-2016/metagenome_tables/OTUtables/Cdata")) {
setwd("C:/Users/fjanz/Documents/GitHub/NEON-Internship-2016/metagenome_tables/OTUtables/Cdata")
directory <- ("C:/Users/fjanz/Documents/GitHub/NEON-Internship-2016/metagenome_tables/OTUtables/Cdata")
}else if(file.exists("/Users/lstanish/Github/NEON-Internship-2016/metagenome_tables/OTUtables/Cdata")) {
setwd("/Users/lstanish/Github/NEON-Internship-2016/metagenome_tables/OTUtables/Cdata")
directory <- ("/Users/lstanish/Github/NEON-Internship-2016/metagenome_tables/OTUtables/Cdata")
} else {
print("Error! No such directory.")
}
files <- list.files(directory, full.names = FALSE)
file1 <- read.table(files[1],quote = "", sep='\t', skip = 2, header=TRUE)
file2 <- read.table(files[2],quote = "", sep="\t", skip = 2, header = TRUE)
file1 <- cleanFile(file1)
file2 <- cleanFile(file2)
Cotu <- mergeData(file1,file2)
END2 <- length(files)
for (i in 3:END2){
tempfile <- read.table(files[i], quote = "", sep="\t", skip = 2, header = TRUE)
tempfile <- cleanFile(tempfile)
Cotu <- mergeData(Cotu,tempfile)
}
Cotu <- cleanTaxon(Cotu)
Cotu_flip <- t.otu(x=Cotu,s=2,e=(END2+1))
Cotu_flip <- Sort(by=row.names,data=Cotu_flip)
#----------------------------------------------------------------------------------------------------------------------
##### Diversity analyses on all 38 files for each sample method #####
Cdiv <- (rep(0,END2))
abundanceC <- (rep(0,END2))
for (i in 1:(END2)){
Cdiv[i] <- diversity(as.numeric(Cotu_flip[i,]))
abundanceC[i] <- specnumber(Cotu_flip[i,])
}
MGdiv <- (rep(0,END))
abundanceM <- (rep(0,END))
for (i in 1:(END)){
MGdiv[i] <- diversity(as.numeric(MGotu_flip[i,]))
abundanceM[i] <- specnumber(MGotu_flip[i,])
}
#convert diversity measures to data frames
Cdiv <- as.data.frame(Cdiv)
MGdiv <- as.data.frame(MGdiv)
abundanceC <- as.data.frame(abundanceC)
abundanceM <- as.data.frame(abundanceM)
#-----------------------------------------------------------------------------------------------------------------------
##### combine data #####
#add names for merging
MGplotnames <- rownames(MGotu_flip)
Cplotnames <- rownames(Cotu_flip)
rownames(MGdiv) <- MGplotnames
rownames(Cdiv) <- Cplotnames
rownames(abundanceM) <- MGplotnames
rownames(abundanceC) <- Cplotnames
sampleTypes <- matrix(nrow=END,ncol=2)
sampleTypes[,1] <- rep("Individual",END)
sampleTypes[,2] <- rep("Composite", END2)
#create empty data frames for graphing
divDF <- data.frame(metagenomeID=as.character(),
sampleType=as.character(),
ShannonIndex=as.numeric(),
stringsAsFactors = FALSE)
specRich <- data.frame(metagenomeID=as.character(),
sampleType=as.character(),
speciesRichness=as.numeric(),
stringsAsFactors = FALSE)
e <- length(MGplotnames)*2 #counter that = total number of samples
j <- 1
#fill graphing data frame
for(i in 1:e){
if (i <= (e/2)){
divDF[i,1] <- MGplotnames[i] #create column of sample IDs
divDF[i,2] <- sampleTypes[i,1] #"Individual"
divDF[i,3] <- MGdiv[i,1] #diversity measure
specRich[i,1] <- MGplotnames[i]
specRich[i,2] <- sampleTypes[i,1]
specRich[i,3] <- abundanceM[i,1]
} else {
divDF[i,1] <- Cplotnames[j]
divDF[i,2] <- sampleTypes[j,2] #"Composite"
divDF[i,3] <- Cdiv[j,1]
specRich[i,1] <- Cplotnames[j]
specRich[i,2] <- sampleTypes[j,2]
specRich[i,3] <- abundanceC[j,1]
j <- j + 1
}
}
#create columns for easy sorting during graphing
divDF <- merge(divDF,IDfile,by="metagenomeID") #the fields sampleID and Event_name come with IDfile
divDF$siteID <- stringr::str_sub(divDF$sampleID,1,4)
divDF$plotID <- stringr::str_sub(divDF$sampleID,1,8)
#repeat for species richness object
specRich <- merge(specRich,IDfile,by="metagenomeID")
specRich$siteID <- stringr::str_sub(specRich$sampleID,1,4)
specRich$plotID <- stringr::str_sub(specRich$sampleID,1,8)
specRich <- specRich[order(specRich$Event_name),]
#create and order metadata to use with merged_OTU (see below)
metadata <- divDF[order(divDF$metagenomeID),]
metadata$SpeciesRichness <- specRich$speciesRichness
divDF <- divDF[order(divDF$Event_name),] #sort alpha diversity object
#----------------------------------------------------------------------------------------------------------------------
##### Beta diversity #####
#merge Individual and Composite OTU tables
merged_OTU <- plyr::join(MGotu,Cotu, type="full",match="all")
merged_OTU[is.na(merged_OTU)] <- 0 #replace NAs with 0s
#make taxon names row names
row.names(merged_OTU) <- merged_OTU$Taxonomy
merged_OTU <- merged_OTU[,-1]
#organize beta diversity object
temp_obj <- order(names(merged_OTU))
merged_OTU <- merged_OTU[,temp_obj]
#check that the columns of merged_OTU are in the same order as the ID's in metadata
col <- colnames(merged_OTU)
confirm <- rep(NA,e)
for (i in 1:e){
if (metadata[i,1] == col[i]){
confirm[i] <- TRUE
} else {
confirm[i] <- FALSE
}
}
if (confirm[sample(seq(1,e),1)] == TRUE){
colnames(merged_OTU) <- metadata$sampleID
}else {
print("Error! Object names don't match")
}
aShan <- aov(ShannonIndex ~ siteID * sampleType, data = divDF) #take out TALL
aSR <- aov(speciesRichness ~ siteID * sampleType, data=specRich)
summary(aShan)
summary(aSR)
TukeyHSD(aShan)
rm(list=ls())
appendMGM <- function (IDs){
e <- length(IDs)
for (i in 1:e){
IDs[i] <- str_c("mgm",as.character(IDs[i]))
}
return(IDs)
}
#removes uneeded columns and rows
cleanFile <- function(afile){
afile <- afile[,-3] #delete phantom empty column
afile <- afile[-1,] #delete header
#reassign metagenome ID to name of 2nd column
mgID <- afile[1,1]
afile <- afile[-1,]
colnames(afile) <- c("Function",mgID)
return(afile)
}
#merges two files by a specified column
mergeData <- function(fileA, fileB){
combinedData <- merge(x = fileA, y = fileB, by="Function", all=TRUE)
combinedData[is.na(combinedData)] <- 0 #replace NAs with 0s
return(combinedData)
}
t.otu <- function(x, s, e) {
## Written by Lee Stanish
## transpose OTU table for ordination analysis##
## x=OTU table; s=starting column; e=ending column
x <- as.data.frame(x)
x1 <- t(x[,c(s:e)])      # transpose OTU counts
colnames(x1) <- x[,1]     #replace OTU ids as column names
x1
}
#trades MG-RAST IDs for event names
replaceIDs <- function (IDframe,dataset){
rnames <- row.names(dataset)
events <- rep(0,length(dataset[,1]))
j <- 1
#fills an object with the sample IDs
for (i in 1:length(IDframe[,1])){
if (IDframe$mgrastID[i] == rnames[j] && j <= 38){
events[j] <- IDframe$metagenomeID[i]
j <- j + 1
}else {
next
}
}
row.names(dataset) <- events
return(dataset)
}
#---------------------------------------------------------------------------------------------------------------------
##### Run main script #####
## Set working directory
if (file.exists("C:/Users/fjanz/Documents/GitHub/NEON-Internship-2016")){
setwd("C:/Users/fjanz/Documents/GitHub/NEON-Internship-2016")
} else if (file.exists(
"/Users/lstanish/Github/NEON-Internship-2016")){
setwd("/Users/lstanish/Github/NEON-Internship-2016")
} else {
print("Error! No such directory.")
}
#read in file with ID mapping info
IDfile <- read.csv("SampleID_metadata/ID_mapping_file.csv", stringsAsFactors = FALSE)
#standardize metagenome IDs
IDfile[,1] <- appendMGM(IDfile[,1])
#tell R where to look for things
if (file.exists("C:/Users/fjanz/Documents/GitHub/NEON-Internship-2016/metagenome_tables/Lvl2FunctionalTables/MGdata")){
setwd("C:/Users/fjanz/Documents/GitHub/NEON-Internship-2016/metagenome_tables/Lvl2FunctionalTables/MGdata")
directory <- ("C:/Users/fjanz/Documents/GitHub/NEON-Internship-2016/metagenome_tables/Lvl2FunctionalTables/MGdata")
} else if (file.exists("/Users/lstanish/Github/NEON-Internship-2016")){
setwd("/Users/lstanish/Github/NEON-Internship-2016/metagenome_tables/Lvl2FunctionalTables/MGdata/")
directory <- "/Users/lstanish/Github/NEON-Internship-2016/metagenome_tables/Lvl2FunctionalTables/MGdata/"
} else {
print("Error! No such directory.")
}
files <- list.files(directory, full.names = FALSE)
file1 <- read.csv(files[1],quote = "", sep='\t',header=FALSE, stringsAsFactors = FALSE, fill = TRUE)
file2 <- read.csv(files[2],quote = "", sep='\t',header=FALSE, stringsAsFactors = FALSE, fill = TRUE)
file1 <- cleanFile(file1)
file2 <- cleanFile(file2)
#combine first two files
MGdata <- as.data.frame(mergeData(file1,file2))
END <- length(files)
#read in and merge remaining files
for (i in 3:END){
tempfile <- read.csv(files[i], quote = "", sep="\t",header = FALSE, stringsAsFactors = FALSE, fill = TRUE)
tempfile <- cleanFile(tempfile)
MGdata <- as.data.frame(mergeData(MGdata,tempfile))
}
#transpose columns and rows and organize to prep for diversity analysis
MGdata_flip <- t.otu(x=MGdata,s=2,e=(END + 1))
MGdata_flip <- Sort(by=row.names,data=MGdata_flip) #sort IDs in ascending order for next
MGdata_flip <- replaceIDs(IDfile,MGdata_flip) #replace metagenome IDs with samples events
##### repeat process for composite data ####
if (file.exists("C:/Users/fjanz/Documents/GitHub/NEON-Internship-2016/metagenome_tables/Lvl2FunctionalTables/Cdata")){
setwd("C:/Users/fjanz/Documents/GitHub/NEON-Internship-2016/metagenome_tables/Lvl2FunctionalTables/Cdata")
directory <- ("C:/Users/fjanz/Documents/GitHub/NEON-Internship-2016/metagenome_tables/Lvl2FunctionalTables/Cdata")
} else if (file.exists("/Users/lstanish/Github/NEON-Internship-2016")){
setwd("/Users/lstanish/Github/NEON-Internship-2016/metagenome_tables/Lvl2FunctionalTables/Cdata/")
directory <- "/Users/lstanish/Github/NEON-Internship-2016/metagenome_tables/Lvl2FunctionalTables/Cdata/"
} else {
print("Error! No such directory.")
}
files <- list.files(directory, full.names = FALSE)
file1 <- read.csv(files[1],quote = "", sep='\t',header=FALSE, stringsAsFactors = FALSE, fill = TRUE)
file2 <- read.csv(files[2],quote = "", sep='\t',header=FALSE, stringsAsFactors = FALSE, fill = TRUE)
file1 <- cleanFile(file1)
file2 <- cleanFile(file2)
Cdata <- as.data.frame(mergeData(file1,file2))
END2 <- length(files)
#read in and merge remaining files
for (i in 3:END2){
tempfile <- read.csv(files[i], quote = "", sep="\t",header = FALSE, stringsAsFactors = FALSE, fill = TRUE)
tempfile <- cleanFile(tempfile)
Cdata <- as.data.frame(mergeData(Cdata,tempfile))
}
Cdata_flip <- t.otu(x=Cdata,s=2,e=(END2 + 1))
Cdata_flip <- Sort(by=row.names,data=Cdata_flip)
Cdata_flip <- replaceIDs(IDfile,Cdata_flip)
#----------------------------------------------------------------------------------------------------------------------
##### Diversity analyses on all 38 files for each sample method #####
Cdiv <- (rep(0,END2))
evennessC <- (rep(0,END2))
for (i in 1:(END2)){
Cdiv[i] <- diversity(as.numeric(Cdata_flip[i,]))
abundance <- specnumber(Cdata_flip[i,])
evennessC[i] <- Cdiv[i]/log(abundance)
}
MGdiv <- (rep(0,END))
evennessM <- (rep(0,END))
for (i in 1:(END)){
MGdiv[i] <- diversity(as.numeric(MGdata_flip[i,]))
abundance <- specnumber(MGdata_flip[i,])
evennessM[i] <-  MGdiv[i]/log(abundance)
}
#convert diversity measures to data frames
Cdiv <- as.data.frame(Cdiv)
MGdiv <- as.data.frame(MGdiv)
evennessC <- as.data.frame(evennessC)
evennessM <- as.data.frame(evennessM)
#-----------------------------------------------------------------------------------------------------------------------
##### combine data #####
#add names for merging
MGplotnames <- rownames(MGdata_flip)
Cplotnames <- rownames(Cdata_flip)
rownames(MGdiv) <- MGplotnames
rownames(Cdiv) <- Cplotnames
rownames(evennessM) <- MGplotnames
rownames(evennessC) <- Cplotnames
sampleTypes <- matrix(nrow=END,ncol=2)
sampleTypes[,1] <- rep("Individual",END)
sampleTypes[,2] <- rep("Composite", END2)
#create empty data frames for graphing
divDF <- data.frame(metagenomeID=as.character(),
sampleType=as.character(),
ShannonIndex=as.numeric(),
stringsAsFactors = FALSE)
even <- data.frame(metagenomeID=as.character(),
sampleType=as.character(),
Evenness=as.numeric(),
stringsAsFactors = FALSE)
e <- length(MGplotnames)*2 #counter that = total number of samples
j <- 1
#fill graphing data frame
for(i in 1:e){
if (i <= (e/2)){
divDF[i,1] <- MGplotnames[i] #create column of sample IDs
divDF[i,2] <- sampleTypes[i,1] #"Individual"
divDF[i,3] <- MGdiv[i,1] #diversity measure
even[i,1] <- MGplotnames[i]
even[i,2] <- sampleTypes[i,1]
even[i,3] <- evennessM[i,1]
} else {
divDF[i,1] <- Cplotnames[j]
divDF[i,2] <- sampleTypes[j,2] #"Composite"
divDF[i,3] <- Cdiv[j,1]
even[i,1] <- Cplotnames[j]
even[i,2] <- sampleTypes[j,2]
even[i,3] <- evennessC[j,1]
j <- j + 1
}
}
#create columns for easy sorting during graphing
divDF <- merge(divDF,IDfile,by="metagenomeID") #the fields sampleID and Event_name come with IDfile
divDF$siteID <- stringr::str_sub(divDF$sampleID,1,4)
divDF$plotID <- stringr::str_sub(divDF$sampleID,1,8)
#repeat for species richness object
even <- merge(even,IDfile,by="metagenomeID")
even$siteID <- stringr::str_sub(even$sampleID,1,4)
even$plotID <- stringr::str_sub(even$sampleID,1,8)
even <- even[order(even$Event_name),]
#create and order metadata to use with merged_table (see below)
metadata <- divDF[order(divDF$mgrastID),]
#metadata object must be created before this step or the ordering will be off!
divDF <- divDF[order(divDF$Event_name),] #sort alpha diversity object
aShan <- aov(ShannonIndex ~ siteID * sampleType, data = divDF) #take out TALL
aSR <- aov(Evenness ~ siteID * sampleType, data=even)
summary(aShan)
summary(aSR)
rm(list=ls())
library(vegan)
library(ggplot2)
library(grid)
library("stringr")
### Load required function ###
t.otu <- function(x, s, e) {
## Written by Lee Stanish
## transpose OTU table for ordination analysis##
## x=OTU table; s=starting column; e=ending column
x <- as.data.frame(x)
x1 <- t(x[,c(s:e)])      # transpose OTU counts
colnames(x1) <- x[,1]     #replace OTU ids as column names
x1
}
fill.taxonomy.newMG <- function(x) {
### Parses taxon names in abundance table. Specific for 'new' MG-RAST output
### tables with structure "metagenomeID.DB.taxonlevel.csv"
### Table should be read in as tab-separated .csv file.
### By Lee Stanish June 27, 2016
#tax <- x[,1]
tax <- x
alltax <- str_split_fixed(as.character(tax), pattern=";",n=7)
colnames(alltax) <- c("domain", "phylum", "class", "order", "family","genus", "species")
alltax <- data.frame(alltax)
return(alltax)
}
setwd("C:/Users/fjanz/Documents/GitHub/NEON-Internship-2016")
#setwd("/Users/stanish/Documents/R")  # set to your dir
otu <- read.csv("Metagenome_beta_div_data.csv",header = TRUE)  # set to your file
env <- read.csv("Metagenome_beta_div_metadata.csv")
## transpose OTU table using function t.otu
otu.t <- t.otu(x=otu,s=2,e=length(otu))  # adjust numbers as needed for your OTU table
ncol(otu.t)
#rownames(otu.t) <- otu[1,c(2:77)]
taxonomy <- fill.taxonomy.newMG(otu$X)   # check that #columns in otu.t=length of taxonomy
###########           Analysis code (for later)       ####################
###Rarefy OTU table###
### A) Calculate total # seqs for each sample
tototu <- apply(otu.t, MARGIN=1, FUN=sum)
min(tototu)			# rarefy to this value
### B) Rarefy
oturare <- rrarefy(otu.t, min(tototu))
otumax <- apply(oturare, 2, max)
otu.1 <- oturare[, otumax >= 2]
taxonomy.1 <- droplevels(taxonomy[otumax >= 2,])
#Transform rarefied OTU table
otu.pct <- decostand(otu.1, method="total")
otu.hell <- decostand(otu.1, method="hellinger")  # Hellinger transformation
######## nMDS  #####
mds <- metaMDS(otu.hell, k=2, distance="bray", trymax=20, autotransform=FALSE)
# Shepard plot to compare actual dissimilarities to computed dissimilarities
diss <- vegdist(otu.hell, distance="bray")
mds.sc <- scores(mds, display="sites", choices=c(1:2))
mds.spec <- scores(mds, display="species", choices=c(1:2))
mds.sc <- data.frame(mds.sc)
to.rm <- c(which(env$siteID=="TALL"))
env.rm <- env[-to.rm,]
otu.hell.rm <- otu.hell[-to.rm,]
diss <- vegdist(otu.hell.rm, method="euclidean")
x <- betadisper(diss,group=env.rm$siteID)
x1 <- betadisper(diss2,group=env.rm$siteID)
permutest(x)
anova(x)
adonis(diss~siteID, data=env.rm)
adonis(diss~sampleType, data=env.rm, strata=env.rm$siteID)
otu <- read.csv("Functional_beta_div_data.csv",header=TRUE)
env <- read.csv("Functional_beta_div_metadata.csv", header= TRUE)
otu.t <- t.otu(x=otu,s=2,e=length(otu))  # adjust numbers as needed for your OTU table
ncol(otu.t)
###########           Analysis code (for later)       ####################
###Rarefy OTU table###
### A) Calculate total # seqs for each sample
tototu <- apply(otu.t, MARGIN=1, FUN=sum)
min(tototu)			# rarefy to this value
### B) Rarefy
oturare <- rrarefy(otu.t, min(tototu))
otumax <- apply(oturare, 2, max)
otu.1 <- oturare[, otumax >= 2]
#taxonomy.1 <- droplevels(taxonomy[otumax >= 2,])
#Transform rarefied OTU table
otu.pct <- decostand(otu.1, method="total")
otu.hell <- decostand(otu.1, method="hellinger")  # Hellinger transformation
######## nMDS  #####
mds <- metaMDS(otu.pct, k=2, distance="bray", trymax=20, autotransform=FALSE)
# Shepard plot to compare actual dissimilarities to computed dissimilarities
diss <- vegdist(otu.pct, distance="bray")
mds.sc <- scores(mds, display="sites", choices=c(1:2))
mds.spec <- scores(mds, display="species", choices=c(1:2))
mds.sc <- data.frame(mds.sc)
to.rm <- c(which(env$siteID=="TALL"))
env.rm <- env[-to.rm,]
otu.pct.rm <- otu.pct[-to.rm,]
diss <- vegdist(otu.pct.rm, method="euclidean")
x <- betadisper(diss,group=env.rm$siteID)
adonis(diss~siteID, data=env.rm)
adonis(diss~sampleType, data=env.rm, strata=env.rm$siteID)
