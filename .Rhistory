for (i in 1:(END2-1)){
Cdiv[i] <- diversity(as.numeric(Cotu_flip[i,]))
abundanceC[i] <- specnumber(Cotu_flip[i,])
}
MGdiv <- (rep(0,END-1))
abundanceM <- (rep(0,END-1))
for (i in 1:(END-1)){
MGdiv[i] <- diversity(as.numeric(MGotu_flip[i,]))
abundanceM[i] <- specnumber(MGotu_flip[i,])
}
#convert diversity measures to data frames
Cdiv <- as.data.frame(Cdiv)
MGdiv <- as.data.frame(MGdiv)
abundanceC <- as.data.frame(abundanceC)
abundanceM <- as.data.frame(abundanceM)
#add names for merging
MGplotnames <- rownames(MGotu_flip)
Cplotnames <- rownames(Cotu_flip)
rownames(MGdiv) <- MGplotnames
rownames(Cdiv) <- Cplotnames
rownames(abundanceM) <- MGplotnames
rownames(abundanceC) <- Cplotnames
View(MGdiv)
Cdiv <- (rep(0,END2))
abundanceC <- (rep(0,END2))
for (i in 1:(END2)){
Cdiv[i] <- diversity(as.numeric(Cotu_flip[i,]))
abundanceC[i] <- specnumber(Cotu_flip[i,])
}
MGdiv <- (rep(0,END))
abundanceM <- (rep(0,END))
for (i in 1:(END)){
MGdiv[i] <- diversity(as.numeric(MGotu_flip[i,]))
abundanceM[i] <- specnumber(MGotu_flip[i,])
}
Cdiv <- as.data.frame(Cdiv)
MGdiv <- as.data.frame(MGdiv)
abundanceC <- as.data.frame(abundanceC)
abundanceM <- as.data.frame(abundanceM)
#add names for merging
MGplotnames <- rownames(MGotu_flip)
Cplotnames <- rownames(Cotu_flip)
rownames(MGdiv) <- MGplotnames
rownames(Cdiv) <- Cplotnames
rownames(abundanceM) <- MGplotnames
rownames(abundanceC) <- Cplotnames
sampleTypes <- matrix(nrow=37,ncol=2)
sampleTypes[,1] <- rep("Individual",37)
sampleTypes[,2] <- rep("Composite", 37)
#create empty data frame for graphing
divDF <- data.frame(metagenomeID=as.character(),
sampleType=as.character(),
ShannonIndex=as.numeric(),
stringsAsFactors = FALSE)
specRich <- data.frame(metagenomeID=as.character(),
sampleType=as.character(),
speciesRichness=as.numeric(),
stringsAsFactors = FALSE)
e <- length(MGplotnames)*2 #number of samples
j <- 1
#fill graphing data frame
for(i in 1:e){
if (i <= (e/2)){
divDF[i,1] <- MGplotnames[i]
divDF[i,2] <- sampleTypes[i,1]
divDF[i,3] <- MGdiv[i,1]
specRich[i,1] <- MGplotnames[i]
specRich[i,2] <- sampleTypes[i,1]
specRich[i,3] <- abundanceM[i,1]
} else {
divDF[i,1] <- Cplotnames[j]
divDF[i,2] <- sampleTypes[j,2]
divDF[i,3] <- Cdiv[j,1]
specRich[i,1] <- Cplotnames[j]
specRich[i,2] <- sampleTypes[j,2]
specRich[i,3] <- abundanceC[j,1]
j <- j + 1
}
}
divDF <- merge(divDF,IDfile,by="metagenomeID")
divDF$siteID <- stringr::str_sub(divDF$sampleID,1,4)
divDF$plotID <- stringr::str_sub(divDF$sampleID,1,8)
divDF <- divDF[order(divDF$Event_name),]
specRich <- merge(specRich,IDfile,by="metagenomeID")
specRich$siteID <- stringr::str_sub(specRich$sampleID,1,4)
specRich$plotID <- stringr::str_sub(specRich$sampleID,1,8)
specRich <- specRich[order(specRich$Event_name),]
sampleTypes <- matrix(nrow=END,ncol=2)
sampleTypes[,1] <- rep("Individual",END)
sampleTypes[,2] <- rep("Composite", END2)
#create empty data frame for graphing
divDF <- data.frame(metagenomeID=as.character(),
sampleType=as.character(),
ShannonIndex=as.numeric(),
stringsAsFactors = FALSE)
specRich <- data.frame(metagenomeID=as.character(),
sampleType=as.character(),
speciesRichness=as.numeric(),
stringsAsFactors = FALSE)
e <- length(MGplotnames)*2 #number of samples
j <- 1
#fill graphing data frame
for(i in 1:e){
if (i <= (e/2)){
divDF[i,1] <- MGplotnames[i]
divDF[i,2] <- sampleTypes[i,1]
divDF[i,3] <- MGdiv[i,1]
specRich[i,1] <- MGplotnames[i]
specRich[i,2] <- sampleTypes[i,1]
specRich[i,3] <- abundanceM[i,1]
} else {
divDF[i,1] <- Cplotnames[j]
divDF[i,2] <- sampleTypes[j,2]
divDF[i,3] <- Cdiv[j,1]
specRich[i,1] <- Cplotnames[j]
specRich[i,2] <- sampleTypes[j,2]
specRich[i,3] <- abundanceC[j,1]
j <- j + 1
}
}
divDF <- merge(divDF,IDfile,by="metagenomeID")
divDF$siteID <- stringr::str_sub(divDF$sampleID,1,4)
divDF$plotID <- stringr::str_sub(divDF$sampleID,1,8)
divDF <- divDF[order(divDF$Event_name),]
specRich <- merge(specRich,IDfile,by="metagenomeID")
specRich$siteID <- stringr::str_sub(specRich$sampleID,1,4)
specRich$plotID <- stringr::str_sub(specRich$sampleID,1,8)
specRich <- specRich[order(specRich$Event_name),]
View(divDF)
ggplot(divDF,aes(x=Event_name,y=ShannonIndex)) + facet_wrap(~siteID,3,scales="free") +
geom_bar(aes(fill=sampleType),stat="identity",position="dodge") + scale_fill_manual(values=c("seashell","sandybrown"))
View(Cotu)
merged_OTU <- merge(MGotu,Cotu,by="Taxonomy")
View(merged_OTU)
metadata <- as.data.frame(c(MGplotnames,Cplotnames))
View(metadata)
View(divDF)
Event_names <- cbind(divDF$Event_name,divDF$metagenomeID)
View(Event_names)
Event_names <- rbind(divDF$Event_name,divDF$metagenomeID)
View(Event_names)
metadata$Event_name <- divDF$Event_name
metadata <- metadata[order(metadata$Event_name)]
metadata <- metadata[order(metadata$Event_name),]
metadata <- data.frame(IDs=divDF$metagenomeID,Event_names=divDF$Event_name)
View(metadata)
metadata <- data.frame(IDs=divDF$metagenomeID,Samples=divDF$sampleID)
order_metadata <- order(metadata,by="Samples")
metadata <- data.frame(IDs=divDF$metagenomeID,Events=divDF$Event_name)
order_metadata <- order(metadata,by="Samples")
order_metadata <- metadata[order(metadata$Events)
]
order_metadata <- metadata[order(metadata$Events),]
View(order_metadata)
ordered_OTU <- order(metadata$Events)
ordered_OTU
View(MGotu_flip)
ordered <- order(divDF$Event_name)
divDF <- data.frame(metagenomeID=as.character(),
sampleType=as.character(),
ShannonIndex=as.numeric(),
stringsAsFactors = FALSE)
specRich <- data.frame(metagenomeID=as.character(),
sampleType=as.character(),
speciesRichness=as.numeric(),
stringsAsFactors = FALSE)
e <- length(MGplotnames)*2 #number of samples
j <- 1
#fill graphing data frame
for(i in 1:e){
if (i <= (e/2)){
divDF[i,1] <- MGplotnames[i] #create column of sample IDs
divDF[i,2] <- sampleTypes[i,1] #"Individual"
divDF[i,3] <- MGdiv[i,1] #diversity measure
specRich[i,1] <- MGplotnames[i]
specRich[i,2] <- sampleTypes[i,1]
specRich[i,3] <- abundanceM[i,1]
} else {
divDF[i,1] <- Cplotnames[j]
divDF[i,2] <- sampleTypes[j,2] #"Composite"
divDF[i,3] <- Cdiv[j,1]
specRich[i,1] <- Cplotnames[j]
specRich[i,2] <- sampleTypes[j,2]
specRich[i,3] <- abundanceC[j,1]
j <- j + 1
}
}
#create columns for easy sorting during graphing
divDF <- merge(divDF,IDfile,by="metagenomeID")
divDF$siteID <- stringr::str_sub(divDF$sampleID,1,4)
divDF$plotID <- stringr::str_sub(divDF$sampleID,1,8)
ordered <- order(divDF$Event_name)
ordered
View(Cotu_flip)
View(MGdiv)
View(MGdiv)
View(MGotu_flip)
View(Cotu_flip)
setwd("C:/Users/fjanz/Documents")
library(vegan)
library(ggplot2)
library(grid)
otu.t <- t.otu(x=merged_OTU,s=2,e=length(merged_OTU))  # adjust numbers as needed for your OTU table
View(otu.t)
ncol(otu.t)
taxonomy <- merged_OTU$Taxonomy   # check that #columns in otu.t=length of taxonomy
View(fill.taxonomy.newMG)
taxonomy <- fill.taxonomy.newMG(merged_OTU$Taxonomy)   # check that #columns in otu.t=length of taxonomy
taxonomy[1]
fill.taxonomy.newMG <- function(x) {
### Parses taxon names in abundance table. Specific for 'new' MG-RAST output
### tables with structure "metagenomeID.DB.taxonlevel.csv"
### Table should be read in as tab-separated .csv file.
### By Lee Stanish June 27, 2016
tax <- x[,1]
alltax <- str_split_fixed(as.character(tax), pattern=";",n=6)
colnames(alltax) <- c("domain", "phylum", "class", "order", "family","genus", "species")
alltax <- data.frame(alltax)
return(alltax)
}
taxonomy <- fill.taxonomy.newMG(merged_OTU$Taxonomy)   # check that #columns in otu.t=length of taxonomy
str(taxonomy)
head(rownames(merged_OTU))
fill.taxonomy.newMG <- function(x) {
### Parses taxon names in abundance table. Specific for 'new' MG-RAST output
### tables with structure "metagenomeID.DB.taxonlevel.csv"
### Table should be read in as tab-separated .csv file.
### By Lee Stanish June 27, 2016
#tax <- x[,1]
alltax <- str_split_fixed(as.character(tax), pattern=";",n=6)
colnames(alltax) <- c("domain", "phylum", "class", "order", "family","genus", "species")
alltax <- data.frame(alltax)
return(alltax)
}
taxonomy <- fill.taxonomy.newMG(merged_OTU$Taxonomy)   # check that #columns in otu.t=length of taxonomy
fill.taxonomy.newMG <- function(x) {
### Parses taxon names in abundance table. Specific for 'new' MG-RAST output
### tables with structure "metagenomeID.DB.taxonlevel.csv"
### Table should be read in as tab-separated .csv file.
### By Lee Stanish June 27, 2016
#tax <- x[,1]
tax <- x
alltax <- str_split_fixed(as.character(tax), pattern=";",n=6)
colnames(alltax) <- c("domain", "phylum", "class", "order", "family","genus", "species")
alltax <- data.frame(alltax)
return(alltax)
}
taxonomy <- fill.taxonomy.newMG(merged_OTU$Taxonomy)   # check that #columns in otu.t=length of taxonomy
rm(list=ls())
library('stringr')
library('lessR') #for Sort()
library('vegan') #ecology functions
library("dplyr")
#merges two files by a specified column
mergeData <- function(fileA, fileB){
combinedData <- merge(x = fileA, y = fileB, by="Taxonomy", all=TRUE)
combinedData[is.na(combinedData)] <- 0 #replace NAs with 0s
return(combinedData)
}
#removes uneeded columns
cleanFile <- function(afile){
afile <- afile[,-4] #delete phantom empty column
afile <- afile[,-1] #delete taxon column
return(afile)
}
#filters out non-target genomic data
cleanTaxon <- function (df){
df <- filter(df,grepl("virus",df$Taxonomy)==FALSE)
df <- filter(df,grepl("Eukaryota",df$Taxonomy)==FALSE)
df <- filter(df,grepl("Archaea",df$Taxonomy)==FALSE)
df <- filter(df,grepl("unclassified",df$Taxonomy)==FALSE)
return(df)
}
fill.taxonomy.newMG <- function(x) {
### Parses taxon names in abundance table. Specific for 'new' MG-RAST output
### tables with structure "metagenomeID.DB.taxonlevel.csv"
### Table should be read in as tab-separated .csv file.
### By Lee Stanish June 27, 2016
#tax <- x[,1]
tax <- x
alltax <- str_split_fixed(as.character(tax), pattern=";",n=7)
colnames(alltax) <- c("domain", "phylum", "class", "order", "family","genus", "species")
alltax <- data.frame(alltax)
return(alltax)
}
t.otu <- function(x, s, e) {
## Written by Lee Stanish
## transpose OTU table for ordination analysis##
## x=OTU table; s=starting column; e=ending column
x <- as.data.frame(x)
x1 <- t(x[,c(s:e)])      # transpose OTU counts
colnames(x1) <- x[,1]     #replace OTU ids as column names
x1
}
#---------------------------------------------------------------------------------------------------------------------
#Run main script
## Set working directory
if (file.exists(
"C:/Users/fjanz/Documents")){
setwd("C:/Users/fjanz/Documents")
}
if (file.exists(
"/Users/lstanish/Github/NEON-Internship-2016")){
setwd("/Users/lstanish/Github/NEON-Internship-2016")
}
#read in file with ID mapping info
IDfile <- read.csv("SampleID_metadata/ID_mapping_file.csv")
#remove uneeded columns
IDfile <- IDfile[,-1]
if (file.exists(
"C:/Users/fjanz/Documents/GitHub/NEON-Internship-2016/metagenome_tables/OTUtables/MGdata")){
setwd("C:/Users/fjanz/Documents/GitHub/NEON-Internship-2016/metagenome_tables/OTUtables/MGdata")
directory <- ("C:/Users/fjanz/Documents/GitHub/NEON-Internship-2016/metagenome_tables/OTUtables/MGdata")
}
#tell R where to look for things
if (file.exists(
"/Users/lstanish/Github/NEON-Internship-2016")){
setwd("/Users/lstanish/Github/NEON-Internship-2016/metagenome_tables/OTUtables/MGdata/")
directory <- "/Users/lstanish/Github/NEON-Internship-2016/metagenome_tables/OTUtables/MGdata/"
}
files <- list.files(directory, full.names = FALSE)
testFile <- readLines(files[1],2539)
file1 <- read.table(files[1],quote = "", sep='\t',header=TRUE, skip = 2)
file2 <- read.table(files[2],quote = "", sep='\t',header=TRUE, skip = 2)
file1 <- cleanFile(file1)
file2 <- cleanFile(file2)
#combine first two files
MGotu <- as.data.frame(mergeData(file1,file2))
END <- length(files)
#read in and merge remaining files
for (i in 3:END){
tempfile <- read.table(files[i], quote = "", sep="\t", skip = 2,header = TRUE)
tempfile <- cleanFile(tempfile)
MGotu <- as.data.frame(mergeData(MGotu,tempfile))
}
#filter unwanted data
MGotu <- cleanTaxon(MGotu)
#split out taxonomic info
MGtaxa <- fill.taxonomy.newMG(MGotu$Taxonomy)
#transpose columns and rows and organize to prep for diversity analysis
MGotu_flip <- t.otu(x=MGotu,s=2,e=(END + 1))
MGotu_flip <- Sort(by=row.names,data=MGotu_flip)
#repeat process for composite data
if(file.exists(
"C:/Users/fjanz/Documents/GitHub/NEON-Internship-2016/metagenome_tables/OTUtables/Cdata")) {
setwd("C:/Users/fjanz/Documents/GitHub/NEON-Internship-2016/metagenome_tables/OTUtables/Cdata")
directory <- ("C:/Users/fjanz/Documents/GitHub/NEON-Internship-2016/metagenome_tables/OTUtables/Cdata")
}
if(file.exists(
"/Users/lstanish/Github/NEON-Internship-2016/metagenome_tables/OTUtables/Cdata")) {
setwd("/Users/lstanish/Github/NEON-Internship-2016/metagenome_tables/OTUtables/Cdata")
directory <- ("/Users/lstanish/Github/NEON-Internship-2016/metagenome_tables/OTUtables/Cdata")
}
files <- list.files(directory, full.names = FALSE)
file1 <- read.table(files[1],quote = "", sep='\t', skip = 2, header=TRUE)
file2 <- read.table(files[2],quote = "", sep="\t", skip = 2, header = TRUE)
file1 <- cleanFile(file1)
file2 <- cleanFile(file2)
Cotu <- mergeData(file1,file2)
END2 <- length(files)
for (i in 3:END2){
tempfile <- read.table(files[i], quote = "", sep="\t", skip = 2, header = TRUE)
tempfile <- cleanFile(tempfile)
Cotu <- mergeData(Cotu,tempfile)
}
Cotu <- cleanTaxon(Cotu)
Ctaxa <- fill.taxonomy.newMG(Cotu$Taxonomy)
Cotu_flip <- t.otu(x=Cotu,s=2,e=(END2+1))
Cotu_flip <- Sort(by=row.names,data=Cotu_flip)
#----------------------------------------------------------------------------------------------------------------------
##### Diversity analyses on all 38 files for each sample method #####
Cdiv <- (rep(0,END2))
abundanceC <- (rep(0,END2))
for (i in 1:(END2)){
Cdiv[i] <- diversity(as.numeric(Cotu_flip[i,]))
abundanceC[i] <- specnumber(Cotu_flip[i,])
}
MGdiv <- (rep(0,END))
abundanceM <- (rep(0,END))
for (i in 1:(END)){
MGdiv[i] <- diversity(as.numeric(MGotu_flip[i,]))
abundanceM[i] <- specnumber(MGotu_flip[i,])
}
#convert diversity measures to data frames
Cdiv <- as.data.frame(Cdiv)
MGdiv <- as.data.frame(MGdiv)
abundanceC <- as.data.frame(abundanceC)
abundanceM <- as.data.frame(abundanceM)
#add names for merging
MGplotnames <- rownames(MGotu_flip)
Cplotnames <- rownames(Cotu_flip)
rownames(MGdiv) <- MGplotnames
rownames(Cdiv) <- Cplotnames
rownames(abundanceM) <- MGplotnames
rownames(abundanceC) <- Cplotnames
#-----------------------------------------------------------------------------------------------------------------------
##### combine data #####
sampleTypes <- matrix(nrow=END,ncol=2)
sampleTypes[,1] <- rep("Individual",END)
sampleTypes[,2] <- rep("Composite", END2)
#create empty data frame for graphing
divDF <- data.frame(metagenomeID=as.character(),
sampleType=as.character(),
ShannonIndex=as.numeric(),
stringsAsFactors = FALSE)
specRich <- data.frame(metagenomeID=as.character(),
sampleType=as.character(),
speciesRichness=as.numeric(),
stringsAsFactors = FALSE)
e <- length(MGplotnames)*2 #number of samples
j <- 1
#fill graphing data frame
for(i in 1:e){
if (i <= (e/2)){
divDF[i,1] <- MGplotnames[i] #create column of sample IDs
divDF[i,2] <- sampleTypes[i,1] #"Individual"
divDF[i,3] <- MGdiv[i,1] #diversity measure
specRich[i,1] <- MGplotnames[i]
specRich[i,2] <- sampleTypes[i,1]
specRich[i,3] <- abundanceM[i,1]
} else {
divDF[i,1] <- Cplotnames[j]
divDF[i,2] <- sampleTypes[j,2] #"Composite"
divDF[i,3] <- Cdiv[j,1]
specRich[i,1] <- Cplotnames[j]
specRich[i,2] <- sampleTypes[j,2]
specRich[i,3] <- abundanceC[j,1]
j <- j + 1
}
}
View(divDF)
divDF <- merge(divDF,IDfile,by="metagenomeID")
if (file.exists(
"C:/Users/fjanz/Documents")){
setwd("C:/Users/fjanz/Documents")
}
IDfile <- read.csv("SampleID_metadata/ID_mapping_file.csv")
setwd("C:/Users/fjanz/Documents/GitHub/NEON-Internship-2016")
IDfile <- read.csv("SampleID_metadata/ID_mapping_file.csv")
IDfile <- IDfile[,-1]
View(Cotu)
View(IDfile)
View(divDF)
divDF <- merge(divDF,IDfile,by="metagenomeID") #the fields sampleID and Event_name come with IDfile
divDF$siteID <- stringr::str_sub(divDF$sampleID,1,4)
divDF$plotID <- stringr::str_sub(divDF$sampleID,1,8)
merged_OTU <- merge(MGotu,Cotu,by="Taxonomy")
View(merged_OTU)
test1 <- order(names(merged_OTU))
test1
names(merged_OTU)[test1]
divDF <- divDF[order(divDF$Event_name),]
divDF <- divDF[order(divDF$metagenomeID),]
temp_obj <- order(names(merged_OTU))
merged_OTU <- merged_OTU[,temp_obj]
View(Ctaxa)
library("plyr")
merged_OTU <- pylr::join(MGotu,Cotu,by="Taxonomy", type="full",match="all")
merged_OTU <- plyr::join(MGotu,Cotu,by="Taxonomy", type="full",match="all")
merged_OTU[is.na(merged_OTU)] <- 0
temp_obj <- order(names(merged_OTU))
merged_OTU <- merged_OTU[,temp_obj]
metadata <- divDF[order(divDF$metagenomeID),] #for beta diversity object
divDF <- data.frame(metagenomeID=as.character(),
sampleType=as.character(),
ShannonIndex=as.numeric(),
stringsAsFactors = FALSE)
specRich <- data.frame(metagenomeID=as.character(),
sampleType=as.character(),
speciesRichness=as.numeric(),
stringsAsFactors = FALSE)
e <- length(MGplotnames)*2 #number of samples
j <- 1
#fill graphing data frame
for(i in 1:e){
if (i <= (e/2)){
divDF[i,1] <- MGplotnames[i] #create column of sample IDs
divDF[i,2] <- sampleTypes[i,1] #"Individual"
divDF[i,3] <- MGdiv[i,1] #diversity measure
specRich[i,1] <- MGplotnames[i]
specRich[i,2] <- sampleTypes[i,1]
specRich[i,3] <- abundanceM[i,1]
} else {
divDF[i,1] <- Cplotnames[j]
divDF[i,2] <- sampleTypes[j,2] #"Composite"
divDF[i,3] <- Cdiv[j,1]
specRich[i,1] <- Cplotnames[j]
specRich[i,2] <- sampleTypes[j,2]
specRich[i,3] <- abundanceC[j,1]
j <- j + 1
}
}
#create columns for easy sorting during graphing
divDF <- merge(divDF,IDfile,by="metagenomeID") #the fields sampleID and Event_name come with IDfile
divDF$siteID <- stringr::str_sub(divDF$sampleID,1,4)
divDF$plotID <- stringr::str_sub(divDF$sampleID,1,8)
metadata <- divDF[order(divDF$metagenomeID),]
View(metadata)
divDF <- divDF[order(divDF$Event_name),]
metadata <- metadata[,-3]
if (file.exists(
"C:/Users/fjanz/Documents/GitHub/NEON-Internship-2016")){
setwd("C:/Users/fjanz/Documents/GitHub/NEON-Internship-2016")
}
if (file.exists(
"/Users/lstanish/Github/NEON-Internship-2016")){
setwd("/Users/lstanish/Github/NEON-Internship-2016")
}
getwd()
write.csv(merged_OTU,"Metagenome_beta_div_data.csv")
write.csv(metadata,"Metagenome_beta_div_metadata.csv")
View(merged_OTU)
